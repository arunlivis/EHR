var Data = require('../EHR_Json/data.json')
var Head_Tilt=[];        var a1=[];        var a2=[];
var Rotation=[];         var b1=[];        var b2=[];
var TMJ=[];              var c1=[];        var c2=[];
var high=[];             var d1=[];        var d2=[];
var Lordosis=[];         var e1=[];        var e2=[];
var High_Shoulder=[];    var f1=[];        var f2=[];
var Curvature=[];        var g1=[];        var g2=[];
var Winging=[];          var h1=[];        var h2=[];
var Rib_Hump=[];         var j1=[];        var j2=[];
var Kyphosis=[];         var k1=[];        var k2=[];
var High_Crest=[];       var l1=[];        var l2=[];
var High_PSIS=[];        var m1=[];        var m2=[];
var Curvature1=[];       var n1=[];        var n2=[];
var Lordosis1=[];        var o1=[];        var o2=[];
var inhale=Math.floor((Math.random()*100)+10);
var exhale=Math.floor((Math.random()*100)+10);

module.exports={
	login : function (browser) {
		browser 
		.login(Data.user1[1].username, Data.user1[1].password)
},


'view files' : function (browser){
      browser
      .pause(1000)      
       .useXpath()
       .click("//*[@id='mainMenu']/ul/li[2]/a")
       .pause(500)
       .click("//*[@id='mainMenu']/ul/li[2]/ul/li[1]/a")
       .waitForElementVisible("//*[@id='page']/header/div/div/div/h1" , 60000)
       .pause(200)
       .click("//*[@id='patient']/tbody/tr/td[6]/a/i")
       .waitForElementVisible("//*[@id='mainContent']/div[8]/ul/li[1]/a" , 60000)
     },
'Exam Forms' : function(browser){
  browser
       .pause(2000)
       .useXpath()
       .click("//*[@id='mainContent']/div[8]/ul/li[4]/a")
       .waitForElementVisible("//*[@id='treatmentformsContent']/div[1]/span[3]/button" , 60000)
       .pause(500)
},
'Treatment Plan 1' : function (browser){
  browser
      .pause(2000)
      .useXpath()
      .click("//*[@id='treatmentformsContent']/div[2]/span/button")
      .waitForElementVisible("//*[@id='treatmentformsContent']/div[1]/span[2]" , 60000)
      .pause(500)
},
'Initial exam screen 2' : function (browser){
  
  browser
 
  browser
      .useXpath()
      .click("//*[@id='treatmentformsContent']/div/a[text()='Initial Exam Screen 2 -']")
      .waitForElementVisible("//*[@id='treatmentformsContent']/div[1]/span[2]" , 60000)
      .pause(1000)
      .exam2(Head_Tilt,Rotation,TMJ,high,Lordosis,High_Shoulder,Curvature,Winging,Rib_Hump,Kyphosis,High_Crest,High_PSIS,Curvature1,Lordosis1)
      .pause(500)
      .useCss()
      .getLocationInView('#lumbarSpineHighPsisRight_id')
        .pause(500)
        .useXpath()
        .getLocationInView("//*[@id='formid']/div/div/div[1]/div/input")
        .pause(500)
        for(i=0; i<2; i++){
         a=Math.floor((Math.random()*3)+1)
         b=Math.floor((Math.random()*3)+1)
         c=Math.floor((Math.random()*3)+1)
         d=Math.floor((Math.random()*3)+1)
         e=Math.floor((Math.random()*3)+1)
         Head_Tilt.push(a)
         Rotation.push(b)
         TMJ.push(c)
         high.push(d)
         Lordosis.push(e)
         browser
         .useXpath()
        .click("//*[@id='formid']/div/div/div[4]/div[2]/div[1]/label["+a+"]")
        .click("//*[@id='formid']/div/div/div[5]/div[2]/div[1]/label["+b+"]")
        .click("//*[@id='formid']/div/div/div[6]/div[2]/div[1]/label["+c+"]")
        .click("//*[@id='formid']/div/div/div[7]/div[2]/div[1]/label["+d+"]")
        .click("//*[@id='formid']/div/div/div[8]/div[2]/div[1]/label["+e+"]")
  }
      for(i=0; i<2; i++){
          f=Math.floor((Math.random()*3)+1)
          g=Math.floor((Math.random()*3)+1)
          h=Math.floor((Math.random()*3)+1)
          j=Math.floor((Math.random()*3)+1)
          k=Math.floor((Math.random()*3)+1)
          High_Shoulder.push(f)
         Curvature.push(g)
         Winging.push(h)
         Rib_Hump.push(j)
         Kyphosis.push(k)
         browser
         .useXpath()
        .click("//*[@id='formid']/div/div/div[4]/div[4]/div[1]/label["+f+"]")
        .click("//*[@id='formid']/div/div/div[5]/div[4]/div[1]/label["+g+"]")
        .click("//*[@id='formid']/div/div/div[6]/div[4]/div[1]/label["+h+"]")
        .click("//*[@id='formid']/div/div/div[7]/div[4]/div[1]/label["+j+"]")
        
        .click("//*[@id='formid']/div/div/div[9]/div[3]/div[1]/label["+k+"]")
  }
  browser
  .useCss()
  .clearValue('#thoracicSpineChestMeasureInhale_id')
        .setValue('#thoracicSpineChestMeasureInhale_id' , inhale)
        .clearValue('#thoracicSpineChestMeasureExhale_id')
        .setValue('#thoracicSpineChestMeasureExhale_id' , exhale)
  .pause(500)
.getLocationInView('#lumbarSpineLordosisHyper_id')
.pause(500)
.getLocationInView('#thoracicSpineChestMeasureInhale_id')
.pause(500)
         
         for(i=0; i<2; i++){
               l=Math.floor((Math.random()*3)+1)
          m=Math.floor((Math.random()*3)+1)
          n=Math.floor((Math.random()*3)+1)
          o=Math.floor((Math.random()*3)+1)
          High_Crest.push(l)
         High_PSIS.push(m)
         Curvature1.push(n)
         Lordosis1.push(o)
         browser
         .useXpath()
         .click("//*[@id='formid']/div/div/div[12]/div[2]/div[1]/label["+l+"]")
         .click("//*[@id='formid']/div/div/div[13]/div[2]/div[1]/label["+m+"]")
         .click("//*[@id='formid']/div/div/div[14]/div[2]/div[1]/label["+n+"]")
         .click("//*[@id='formid']/div/div/div[15]/div[2]/div[1]/label["+o+"]")
         }
         browser
         .useXpath()
         .click("//*[@id='formid']/div/div/div[18]/button[2]")
//==========================================================================================================
         .waitForElementVisible("//*[@id='treatmentformsContent']/div/a[text()='Initial Exam Screen 2 -']" , 60000)
         .pause(1000)
         .click("//*[@id='treatmentformsContent']/div/a[text()='Initial Exam Screen 2 -']")
      .waitForElementVisible("//*[@id='treatmentformsContent']/div[1]/span[2]" , 60000)
      .pause(1000)
     
  },
'check' :function(browser){
   browser
   
Head_Tilt.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Head_Tilt.length; i++) {
    if (Head_Tilt[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      a2.push(current)
    }
        }
        current = Head_Tilt[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      a2.push(current)
    }
}
//---------------------------------------------------------------------------------------------------
Rotation.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Rotation.length; i++) {
    if (Rotation[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      b2.push(current)
    }
        }
        current = Rotation[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      b2.push(current)
    }
}
//-------------------------------------------------------------------------------------------------
TMJ.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < TMJ.length; i++) {
    if (TMJ[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      c2.push(current)
    }
        }
        current = TMJ[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      c2.push(current)
    }
}

//-------------------------------------------------------------------------------------------
high.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < high.length; i++) {
    if (high[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      d2.push(current)
    }
        }
        current = high[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      d2.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Lordosis.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Lordosis.length; i++) {
    if (Lordosis[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      e2.push(current)
    }
        }
        current = Lordosis[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      e2.push(current)
    }
}

//-------------------------------------------------------------------------------------------
High_Shoulder.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < High_Shoulder.length; i++) {
    if (High_Shoulder[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      f2.push(current)
    }
        }
        current = High_Shoulder[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      f2.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Curvature.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Curvature.length; i++) {
    if (Curvature[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      g2.push(current)
    }
        }
        current = Curvature[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      g2.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Winging.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Winging.length; i++) {
    if (Winging[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      h2.push(current)
    }
        }
        current = Winging[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      h2.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Rib_Hump.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Rib_Hump.length; i++) {
    if (Rib_Hump[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      j2.push(current)
    }
        }
        current = Rib_Hump[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      j2.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Kyphosis.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Kyphosis.length; i++) {
    if (Kyphosis[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      k2.push(current)
    }
        }
        current = Kyphosis[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      k2.push(current)
    }
}

//-------------------------------------------------------------------------------------------
High_Crest.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < High_Crest.length; i++) {
    if (High_Crest[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      l2.push(current)
    }
        }
        current = High_Crest[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      l2.push(current)
    }
}

//-------------------------------------------------------------------------------------------
High_PSIS.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < High_PSIS.length; i++) {
    if (High_PSIS[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      m2.push(current)
    }
        }
        current = High_PSIS[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      m2.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Curvature1.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Curvature1.length; i++) {
    if (Curvature1[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      n2.push(current)
    }
        }
        current = Curvature1[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      n2.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Lordosis1.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Lordosis1.length; i++) {
    if (Lordosis1[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      o2.push(current)
    }
        }
        current = Lordosis1[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      o2.push(current)
    }
}

//-------------------------------------------------------------------------------------------
browser
     .examform2(a1,b1,c1,d1,e1,f1,g1,h1,j1,k1,l1,m1,n1,o1,a2,b2,c2,d2,e2,f2,g2,h2,j2,k2,l2,m2,n2,o2,inhale,exhale)
     .pause(500)
     .end()
},
'Result' :''+ function(browser){
      browser
console.log("Head_Tilt------>"+[JSON.stringify(a1.sort())==JSON.stringify(a2.sort())])
console.log("Rotation------->"+[JSON.stringify(b1.sort())==JSON.stringify(b2.sort())])
console.log("TMJ------------>"+[JSON.stringify(c1.sort())==JSON.stringify(c2.sort())])
console.log("high----------->"+[JSON.stringify(d1.sort())==JSON.stringify(d2.sort())])
console.log("Lordosis------->"+[JSON.stringify(e1.sort())==JSON.stringify(e2.sort())])
console.log("High_Shoulder-->"+[JSON.stringify(f1.sort())==JSON.stringify(f2.sort())])
console.log("Curvature------>"+[JSON.stringify(g1.sort())==JSON.stringify(g2.sort())])
console.log("Winging-------->"+[JSON.stringify(h1.sort())==JSON.stringify(h2.sort())])
console.log("Rib_Hump------->"+[JSON.stringify(j1.sort())==JSON.stringify(j2.sort())])
console.log("Kyphosis------->"+[JSON.stringify(k1.sort())==JSON.stringify(k2.sort())])
console.log("High_Crest----->"+[JSON.stringify(l1.sort())==JSON.stringify(l2.sort())])
console.log("High_PSIS------>"+[JSON.stringify(m1.sort())==JSON.stringify(m2.sort())])
console.log("Curvature1----->"+[JSON.stringify(n1.sort())==JSON.stringify(n2.sort())])
console.log("Lordosis1------>"+[JSON.stringify(o1.sort())==JSON.stringify(o2.sort())])

}
}
var Data = require('../EHR_Json/data.json')

var Head_Tilt=[];        var a1=[];        var a2=[];
var Rotation=[];         var b1=[];        var b2=[];
var TMJ=[];              var c1=[];        var c2=[];
var high=[];             var d1=[];        var d2=[];
var Lordosis=[];         var e1=[];        var e2=[];
var High_Shoulder=[];    var f1=[];        var f2=[];
var Curvature=[];        var g1=[];        var g2=[];
var Winging=[];          var h1=[];        var h2=[];
var Rib_Hump=[];         var j1=[];        var j2=[];
var Kyphosis=[];         var k1=[];        var k2=[];
var High_Crest=[];       var l1=[];        var l2=[];
var High_PSIS=[];        var m1=[];        var m2=[];
var Curvature1=[];       var n1=[];        var n2=[];
var Lordosis1=[];        var o1=[];        var o2=[];

var id;

var inhale=Math.floor((Math.random()*100)+10);
var exhale=Math.floor((Math.random()*100)+10);

module.exports={
    login : function (browser) {
        browser 
        .login(Data.user1[2].username, Data.user1[2].password)

},
'Patient' : function(browser){
	browser  
	   .useCss()
	   .pause(500)
	   .click('a[class="firstLevel"][href="#"]')
	   .pause(300)
	   .click('a[href="/EHR/Doctor/view-patient-details-open"]')
	   .waitForElementVisible('#col0_filter' , 60000)
	   .pause(500)
	   .getText('td[class="sorting_1"]' , function(result){
	   	  id=result.value
	   	    browser
	   	       .useCss()
	   	       .click('a[onclick="postNavigateToProfile('+result.value+',1);"]')
	   })
	   .waitForElementVisible('button[onclick="openStartTreatment();"]' , 60000)
	   .pause(500)
},
'Exam Form 2':function(browser){	
   browser   
	   .useXpath()
	   .click("//*[@id='treatmentformsContent']/div[2]/span/button")
	   .useCss()
	   .waitForElementVisible('button[onclick="addSoapNotes();"]' , 60000)
	   .pause(500)
	   .useXpath()
	   .click("//*[@id='treatmentformsContent']/div/a[text()='Initial Exam Screen 2 -']")
	   .useCss()
	   .waitForElementVisible('button[onclick="gobackExamsList()"]' , 60000)
	   .pause(500)
	   .exam2(Head_Tilt,Rotation,TMJ,high,Lordosis,High_Shoulder,Curvature,Winging,Rib_Hump,Kyphosis,High_Crest,High_PSIS,Curvature1,Lordosis1)
       .pause(500)
       .useCss()
       .getLocationInView('#lumbarSpineHighPsisRight_id')
       .pause(500)
       .useXpath()
       .getLocationInView("//*[@id='formid']/div/div/div[1]/div/input")
       .pause(500)
       for(i=0; i<2; i++){
       	not_1=['cervicalSpineHeadTiltRight' , 'cervicalSpineHeadTiltLeft' , 'cervicalSpineHeadTiltNormal']
       	not_2=['cervicalSpineRotationRight' , 'cervicalSpineRotationLeft' , 'cervicalSpineRotationNormal']
       	not_3=['cervicalSpineTmjSyndromeRight' , 'cervicalSpineTmjSyndromeLeft' , 'cervicalSpineTmjSyndromeNormal']
       	not_4=['cervicalSpineHighShoulderRight' , 'cervicalSpineHighShoulderLeft' , 'cervicalSpineHighShoulderNormal']
       	not_5=['cervicalSpineLordosisHyper' , 'cervicalSpineLordosisHypo' , 'cervicalSpineLordosisNormal']
         a=Math.floor((Math.random()*3)+1)
         b=Math.floor((Math.random()*3)+1)
         c=Math.floor((Math.random()*3)+1)
         d=Math.floor((Math.random()*3)+1)
         e=Math.floor((Math.random()*3)+1)
            Head_Tilt.push(a)
            Rotation.push(b)
            TMJ.push(c)
            high.push(d)
            Lordosis.push(e)
               browser
                  .useCss()
                  .click('input[name="'+not_1[a-1]+'"][value="1"]')
                  .click('input[name="'+not_2[b-1]+'"][value="1"]')
                  .click('input[name="'+not_3[c-1]+'"][value="1"]')
                  .click('input[name="'+not_4[d-1]+'"][value="1"]')
                  .click('input[name="'+not_5[e-1]+'"][value="1"]')
                  
        }
        for(i=0; i<2; i++){
        	not_6=['thoracicSpineHighShoulderRight' , 'thoracicSpineHighShoulderLeft' , 'thoracicSpineHighShoulderNormal']
        	not_7=['thoracicSpineCurvatureRight' , 'thoracicSpineCurvatureLeft' , 'thoracicSpineCurvatureNormal']
        	not_8=['thoracicSpineWingingRight' , 'thoracicSpineWingingLeft' , 'thoracicSpineWingingNormal']
        	not_9=['thoracicSpineRibHumpRight' , 'thoracicSpineRibHumpLeft' , 'thoracicSpineRibHumpNormal']
        	not_10=['thoracicSpineKyphosisHyper' , 'thoracicSpineKyphosisHypo' , 'thoracicSpineKyphosisNormal']
          f=Math.floor((Math.random()*3)+1)
          g=Math.floor((Math.random()*3)+1)
          h=Math.floor((Math.random()*3)+1)
          j=Math.floor((Math.random()*3)+1)
          k=Math.floor((Math.random()*3)+1)
             High_Shoulder.push(f)
             Curvature.push(g)
             Winging.push(h)
             Rib_Hump.push(j)
             Kyphosis.push(k)
                browser
                   .useCss()
                   .click('input[name="'+not_6[f-1]+'"][value="1"]')
                   .click('input[name="'+not_7[g-1]+'"][value="1"]')
                   .click('input[name="'+not_8[h-1]+'"][value="1"]')
                   .click('input[name="'+not_9[j-1]+'"][value="1"]')
                   .click('input[name="'+not_10[k-1]+'"][value="1"]')
        }
        browser
  .useCss()
  .clearValue('#thoracicSpineChestMeasureInhale_id')
        .setValue('#thoracicSpineChestMeasureInhale_id' , inhale)
        .clearValue('#thoracicSpineChestMeasureExhale_id')
        .setValue('#thoracicSpineChestMeasureExhale_id' , exhale)
           .pause(500)
           .getLocationInView('#lumbarSpineLordosisHyper_id')
           .pause(500)
           .getLocationInView('#thoracicSpineChestMeasureInhale_id')
           .pause(500)
         
         for(i=0; i<2; i++){
         	not_11=['lumbarSpineHighCrestRight' , 'lumbarSpineHighCrestLeft' , 'lumbarSpineHighCrestNormal']
         	not_12=['lumbarSpineHighPsisRight' , 'lumbarSpineHighPsisLeft' , 'lumbarSpineHighPsisNormal']
         	not_13=['lumbarSpineCurvatureRight' , 'lumbarSpineCurvatureLeft' , 'lumbarSpineCurvatureNormal']
         	not_14=['lumbarSpineLordosisHyper' , 'lumbarSpineLordosisHypo' , 'lumbarSpineLordosisNormal']
               l=Math.floor((Math.random()*3)+1)
               m=Math.floor((Math.random()*3)+1)
               n=Math.floor((Math.random()*3)+1)
               o=Math.floor((Math.random()*3)+1)
                  High_Crest.push(l)
                  High_PSIS.push(m)
                  Curvature1.push(n)
                  Lordosis1.push(o)
                     browser
                       .useCss()
                       .click('input[name="'+not_11[l-1]+'"][value="1"]')
                       .click('input[name="'+not_12[m-1]+'"][value="1"]')
                       .click('input[name="'+not_13[n-1]+'"][value="1"]')
                       .click('input[name="'+not_14[o-1]+'"][value="1"]')
         }
         browser
           .pause(500)
           .useCss()
           .click('button[class="btn btn-primary"][type="submit"]')
           .useXpath()
           .waitForElementVisible("//*[@id='treatmentformsContent']/div/a[text()='Initial Exam Screen 2 -']" , 60000)
           .pause(500)
           .click("//*[@id='treatmentformsContent']/div/a[text()='Initial Exam Screen 2 -']")
           .useCss()
           .waitForElementVisible('button[onclick="gobackExamsList()"]' , 60000)
	       .pause(500)
  },
'check' :function(browser){
   browser
   
Head_Tilt.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Head_Tilt.length; i++) {
    if (Head_Tilt[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      a2.push(current)
    }
        }
        current = Head_Tilt[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      a2.push(current)
    }
}
//---------------------------------------------------------------------------------------------------
Rotation.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Rotation.length; i++) {
    if (Rotation[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      b2.push(current)
    }
        }
        current = Rotation[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      b2.push(current)
    }
}
//-------------------------------------------------------------------------------------------------
TMJ.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < TMJ.length; i++) {
    if (TMJ[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      c2.push(current)
    }
        }
        current = TMJ[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      c2.push(current)
    }
}

//-------------------------------------------------------------------------------------------
high.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < high.length; i++) {
    if (high[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      d2.push(current)
    }
        }
        current = high[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      d2.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Lordosis.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Lordosis.length; i++) {
    if (Lordosis[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      e2.push(current)
    }
        }
        current = Lordosis[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      e2.push(current)
    }
}

//-------------------------------------------------------------------------------------------
High_Shoulder.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < High_Shoulder.length; i++) {
    if (High_Shoulder[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      f2.push(current)
    }
        }
        current = High_Shoulder[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      f2.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Curvature.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Curvature.length; i++) {
    if (Curvature[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      g2.push(current)
    }
        }
        current = Curvature[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      g2.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Winging.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Winging.length; i++) {
    if (Winging[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      h2.push(current)
    }
        }
        current = Winging[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      h2.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Rib_Hump.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Rib_Hump.length; i++) {
    if (Rib_Hump[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      j2.push(current)
    }
        }
        current = Rib_Hump[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      j2.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Kyphosis.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Kyphosis.length; i++) {
    if (Kyphosis[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      k2.push(current)
    }
        }
        current = Kyphosis[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      k2.push(current)
    }
}

//-------------------------------------------------------------------------------------------
High_Crest.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < High_Crest.length; i++) {
    if (High_Crest[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      l2.push(current)
    }
        }
        current = High_Crest[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      l2.push(current)
    }
}

//-------------------------------------------------------------------------------------------
High_PSIS.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < High_PSIS.length; i++) {
    if (High_PSIS[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      m2.push(current)
    }
        }
        current = High_PSIS[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      m2.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Curvature1.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Curvature1.length; i++) {
    if (Curvature1[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      n2.push(current)
    }
        }
        current = Curvature1[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      n2.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Lordosis1.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Lordosis1.length; i++) {
    if (Lordosis1[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      o2.push(current)
    }
        }
        current = Lordosis1[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      o2.push(current)
    }
}

//-------------------------------------------------------------------------------------------
browser
     .examform2(a1,b1,c1,d1,e1,f1,g1,h1,j1,k1,l1,m1,n1,o1,a2,b2,c2,d2,e2,f2,g2,h2,j2,k2,l2,m2,n2,o2,inhale,exhale)
     .pause(500)
     .end()

},
'Result' : ''+function(browser){
      browser
console.log("Head_Tilt------>"+[JSON.stringify(a1.sort())==JSON.stringify(a2.sort())])
console.log("Rotation------->"+[JSON.stringify(b1.sort())==JSON.stringify(b2.sort())])
console.log("TMJ------------>"+[JSON.stringify(c1.sort())==JSON.stringify(c2.sort())])
console.log("high----------->"+[JSON.stringify(d1.sort())==JSON.stringify(d2.sort())])
console.log("Lordosis------->"+[JSON.stringify(e1.sort())==JSON.stringify(e2.sort())])
console.log("High_Shoulder-->"+[JSON.stringify(f1.sort())==JSON.stringify(f2.sort())])
console.log("Curvature------>"+[JSON.stringify(g1.sort())==JSON.stringify(g2.sort())])
console.log("Winging-------->"+[JSON.stringify(h1.sort())==JSON.stringify(h2.sort())])
console.log("Rib_Hump------->"+[JSON.stringify(j1.sort())==JSON.stringify(j2.sort())])
console.log("Kyphosis------->"+[JSON.stringify(k1.sort())==JSON.stringify(k2.sort())])
console.log("High_Crest----->"+[JSON.stringify(l1.sort())==JSON.stringify(l2.sort())])
console.log("High_PSIS------>"+[JSON.stringify(m1.sort())==JSON.stringify(m2.sort())])
console.log("Curvature1----->"+[JSON.stringify(n1.sort())==JSON.stringify(n2.sort())])
console.log("Lordosis1------>"+[JSON.stringify(o1.sort())==JSON.stringify(o2.sort())])


},
}	   
var Data = require('../EHR_Json/data.json')
var lumbo = require('../EHR_Json/lumbopelvicexam.json')

var text=[];                        var text_1=[];              
var observation=[];                 var observation_1=[];            var aa1=[];       
var Pelvic_Unleveling=[];           var Pelvic_Unleveling_1=[];      var aa2=[];                    
var AOX;                            var AOX_1=[];
var palpation=[];                   var palpation_1=[];              var aa3=[];           
var soft;                           var soft_1=[];
var Piriformis=[];                  var Piriformis_1=[];             var aa4=[];            
var Quad_Lumb=[];                   var Quad_Lumb_1=[];              var aa5=[];           
var Paraspinals=[];                 var Paraspinals_1=[];            var aa6=[];            
var Gluteus_Maximus=[];             var Gluteus_Maximus_1=[];        var aa7=[];                
var Gluteus_Medius=[];              var Gluteus_Medius_1=[];         var aa8=[];                            
var Hamstrings=[];                  var Hamstrings_1=[];             var aa9=[];                
var Iliopsoas=[];                   var Iliopsoas_1=[];              var aa10=[];                 
var Rectus_Abdominis=[];            var Rectus_Abdominis_1=[];       var aa11=[];                  
var Obliques=[];                    var Obliques_1=[];               var aa12=[];                 
var other=[];                       var other_1=[];  
var funct=[];                       var funct_1=[];                  var aa13=[];
var TT1=[];                         var TT1_1=[];                    var aa14=[];
var Kemps=[];                       var Kemps_1=[];                  var aa15=[];
var number=[];                      var number_1=[];  
var neuro=[];                      var neuro_1=[];                   var aa16=[];        
var LL=[];                         var LL_1=[];                      var aa17=[];         
var DEFICIT=[];                    var DEFICIT_1=[];                 var aa18=[];            
var oth=[];                        var oth_1=[];        var ck_1=[];              var aa19=[];
var value=[];                      var value_1=[];             

var id;

module.exports={
    login : function (browser) {
        browser 
        .login(Data.user1[2].username, Data.user1[2].password)

},
'Patient' : function(browser){
	browser  
	   .useCss()
	   .pause(500)
	   .click('a[class="firstLevel"][href="#"]')
	   .pause(300)
	   .click('a[href="/EHR/Doctor/view-patient-details-open"]')
	   .waitForElementVisible('#col0_filter' , 60000)
	   .pause(500)
	   .getText('td[class="sorting_1"]' , function(result){
	   	  id=result.value
	   	    browser
	   	       .useCss()
	   	       .click('a[onclick="postNavigateToProfile('+result.value+',1);"]')
	   })
	   .waitForElementVisible('button[onclick="openStartTreatment();"]' , 60000)
	   .pause(500)
},
'Lumbopelvic exam':function(browser){	
   browser   
	    .useXpath()
	    .click("//*[@id='treatmentformsContent']/div[3]/span/button")
	    .useCss()
	    .waitForElementVisible('button[onclick="addSoapNotes();"]' , 60000)
	    .pause(1000)
	    .useXpath()
        .waitForElementVisible("//*[@id='treatmentformsContent']/div/a[text()='Initial Exam Screen 1 -']" , 60000)
        .pause(500)
        .getLocationInView("//*[@id='treatmentformsContent']/div/a[text()='Lumbopelvic Initial Exam -']")
        .pause(500)
        .getLocationInView("//*[@id='treatmentformsContent']/div/a[text()='Initial Exam Screen 1 -']")
        .pause(500)
        .click("//*[@id='treatmentformsContent']/div/a[text()='Lumbopelvic Initial Exam -']")
        .useCss()
	    .waitForElementVisible('button[onclick="gobackExamsList()"]' , 60000)
        .pause(500)
        .lumbopelvicexam(observation, Pelvic_Unleveling , palpation, Piriformis, Quad_Lumb, Paraspinals, Gluteus_Maximus, Gluteus_Medius, Hamstrings, Iliopsoas, Rectus_Abdominis, Obliques, funct, TT1, Kemps, neuro, LL,DEFICIT ,oth)
        .useCss()
	    .pause(500)
	    .getLocationInView('#piriformisleftid')
	    .pause(500)
	    .getLocationInView('#date')
	    .pause(500)
	    for(i=0; i<=4; i++){
	    	a=Math.floor((Math.random()*4)+0)
             text.push(a)
             browser
             .useCss()
             .clearValue(lumbo.view1[i])
             .setValue(lumbo.view1[i] , lumbo.word[a])
	    }
      browser
       .useCss()
      .pause(500)
      .getLocationInView('#piriformisleftid')
      .pause(500)
      .getLocationInView('#date')
      .pause(500)

	    observation.push(1)
	    observation.push(2)
	    observation.push(3)
	     browser
	       .useCss()
	       .click('input[name="independent"][value="1"]')
	       .click('input[name="unlimited"][value="1"]')
	       .click('input[name="none"][value="1"]')

	       for(i=0; i<3; i++){
	    	b=Math.floor((Math.random()*2)+1)
	    	Pelvic_Unleveling.push(b)
	    	not_1=['pelvicUnlevelingLeft' , 'pelvicUnlevelingRight']
	    	  browser
	    	    .useCss()
	    	    .click('input[name="'+not_1[b-1]+'"][value="1"]')
	       }

	    AOX=Math.floor((Math.random()*4)+1)
	    browser
	    .useCss()
	    .click('input[name="aox"][value="'+AOX+'"]')

	    for(i=0; i<3; i++){
	    	c=Math.floor((Math.random()*4)+0)
	    	palpation.push(c)
	    	browser
	    	.useCss()
	    	.click(lumbo.check1[c])
	    }

	     soft=Math.floor((Math.random()*9)+1)
         if(soft<=8){
         browser
         .useCss()
         .click('input[name="legLengthDiscrepancy"][value="'+soft+'"]')
     }

        if(soft==9){
        	browser
         .useCss()
         .click('input[name="legLengthDiscrepancy"][value="'+soft+'"]')
         .pause(500)
           .useCss()
           .isVisible('#legLengthDiscrepancyOtherText' , function(result) {
            if(result.value==true){
               e=Math.floor((Math.random()*4)+0)
               other.push(e)
               browser
               .useCss()
              .clearValue('#legLengthDiscrepancyOtherText')
              .setValue('#legLengthDiscrepancyOtherText' , lumbo.word[e])
            }
         })
        }

        for(i=0; i<3; i++){
        	f=Math.floor((Math.random()*2)+1)
        	g=Math.floor((Math.random()*2)+1)
        	h=Math.floor((Math.random()*2)+1)
        	j=Math.floor((Math.random()*2)+1)
        	k=Math.floor((Math.random()*2)+1)
        	l=Math.floor((Math.random()*2)+1)
        	m=Math.floor((Math.random()*2)+1)
        	n=Math.floor((Math.random()*2)+1)
        	o=Math.floor((Math.random()*2)+1)
                 Piriformis.push(f)
                 Quad_Lumb.push(g)
                 Paraspinals.push(h)
                 Gluteus_Maximus.push(j)
                 Gluteus_Medius.push(k)
                 Hamstrings.push(l)
                 Iliopsoas.push(m)
                 Rectus_Abdominis.push(n)
                 Obliques.push(o)
                 not_2=['piriformisLeft' , 'piriformisRight']
                 not_5=['quadLumbLeft' , 'quadLumbRight']
                 not_8=['paraspinalsLeft' , 'paraspinalsRight']
                 not_3=['gluteusMaximusLeft' , 'gluteusMaximusRight']
                 not_6=['gluteusMediusLeft' , 'gluteusMediusRight']
                 not_9=['hamstringsLeft' , 'hamstringsRight']
                 not_4=['iliopsoasLeft' , 'iliopsoasRight']
                 not_7=['rectusAbdominisLeft' , 'rectusAbdominisRight']
                 not_10=['obliquesLeft' , 'obliquesRight']

             browser
             .useCss()
             .click('input[name="'+not_2[f-1]+'"][value="1"]')
             .click('input[name="'+not_5[g-1]+'"][value="1"]')
             .click('input[name="'+not_8[h-1]+'"][value="1"]')
             .click('input[name="'+not_3[j-1]+'"][value="1"]')
             .click('input[name="'+not_6[k-1]+'"][value="1"]')
             .click('input[name="'+not_9[l-1]+'"][value="1"]')
             .click('input[name="'+not_4[m-1]+'"][value="1"]')
             .click('input[name="'+not_7[n-1]+'"][value="1"]')
             .click('input[name="'+not_10[o-1]+'"][value="1"]')
             
        }

        browser
.useCss()
.pause(500)
.getLocationInView('#neurologicalUnremarkable1')
.pause(500)
.getLocationInView('#otherNoteid')
.pause(500)
        for(i=0; i<5; i++){
        	f=Math.floor((Math.random()*6)+0)
        	funct.push(f)
        	browser
        	.useCss()
        	.click(lumbo.view2[f])
        }

        for(i=0; i<9; i++){
        	g=Math.floor((Math.random()*12)+0)
        	TT1.push(g)
        	browser
        	.useCss()
        	.click(lumbo.T[g])
        }

        for(i=0; i<11; i++){
        	h=Math.floor((Math.random()*16)+0)
        	Kemps.push(h)
        	browser
        	.useCss()
        	.click(lumbo.trend[h])
        }

        for(i=0; i<=5; i++){
        	j=Math.floor((Math.random()*4)+0)
        	number.push(j)
        	browser
        	.useCss()
        	.clearValue(lumbo.flex[i])
        	.setValue(lumbo.flex[i] , lumbo.num[j])
        }
        browser
        .useCss()
.pause(500)
.getLocationInView('#bigtoeS1Leftid')
.pause(500)
.getLocationInView('#positiveAdamsLeftid')
.pause(500)

        for(i=0; i<3; i++){
        	k=Math.floor((Math.random()*2)+0)
        	neuro.push(k)
        	browser
        	.useCss()
        	.click(lumbo.view3[k])
        }

        for(i=0; i<7; i++){
        	l=Math.floor((Math.random()*12)+0)
        	LL.push(l)
        	browser
        	.useCss()
        	.click(lumbo.sen[l])
        }

        for(i=0; i<=17; i++){
        	m=Math.floor((Math.random()*5)+0)
        	value.push(m)
        	browser
        	.useCss()
        	.clearValue(lumbo.mot[i])
        	.setValue(lumbo.mot[i] , lumbo.val[m])
        }

        for(i=0; i<3; i++){
        	n=Math.floor((Math.random()*5)+0)
        	DEFICIT.push(n)
        	if(n<=3){
        	browser
        	.useCss()
        	.click(lumbo.def[n])
        }
           if(n==4){
           	browser
        	.useCss()
        	.click(lumbo.def[n])
        	.pause(500)
           .useCss()
           .isVisible('#lumbofunctionalDeficitOtherTextid' , function(result) {
            if(result.value==true){
               o=Math.floor((Math.random()*4)+0)
               oth.push(o)
               browser
               .useCss()
              .clearValue('#lumbofunctionalDeficitOtherTextid')
              .setValue('#lumbofunctionalDeficitOtherTextid' , lumbo.word[o])
            }
         })
           }
        }

//--------------------------------------------------------------------------------------------------------------------------------------------------        
        browser
        .pause(500)
        .useCss()
        .pause(500)
        .getLocationInView('button[class="btn btn-primary"][type="submit"]')
        .pause(500)
        .useCss()
        .getLocationInView('#stairsid')
        .pause(500)
        .click('button[class="btn btn-primary"][type="submit"]')
        .useXpath()
        .waitForElementVisible("//*[@id='treatmentformsContent']/div/a[text()='Initial Exam Screen 1 -']" , 60000)
        .pause(1000)
        .getLocationInView("//*[@id='treatmentformsContent']/div/a[text()='Initial Exam Screen 8 -']")
        .pause(500)
        .getLocationInView("//*[@id='treatmentformsContent']/div/a[text()='Cervical Initial Exam -']")
        .pause(500)
        .click("//*[@id='treatmentformsContent']/div/a[text()='Lumbopelvic Initial Exam -']")
        .useCss()
	    .waitForElementVisible('button[onclick="gobackExamsList()"]' , 60000)
        .pause(500)

    },
'check':function(browser){
	browser
observation.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < observation.length; i++) {
    if (observation[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      aa1.push(current)
    }
        }
        current = observation[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      aa1.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Pelvic_Unleveling.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Pelvic_Unleveling.length; i++) {
    if (Pelvic_Unleveling[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      aa2.push(current)
    }
        }
        current = Pelvic_Unleveling[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      aa2.push(current)
    }
}

//-------------------------------------------------------------------------------------------
palpation.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < palpation.length; i++) {
    if (palpation[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      aa3.push(current)
    }
        }
        current = palpation[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      aa3.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Piriformis.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Piriformis.length; i++) {
    if (Piriformis[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      aa4.push(current)
    }
        }
        current = Piriformis[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      aa4.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Quad_Lumb.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Quad_Lumb.length; i++) {
    if (Quad_Lumb[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      aa5.push(current)
    }
        }
        current = Quad_Lumb[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      aa5.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Paraspinals.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Paraspinals.length; i++) {
    if (Paraspinals[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      aa6.push(current)
    }
        }
        current = Paraspinals[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      aa6.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Gluteus_Maximus.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Gluteus_Maximus.length; i++) {
    if (Gluteus_Maximus[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      aa7.push(current)
    }
        }
        current = Gluteus_Maximus[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      aa7.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Gluteus_Medius.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Gluteus_Medius.length; i++) {
    if (Gluteus_Medius[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      aa8.push(current)
    }
        }
        current = Gluteus_Medius[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      aa8.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Hamstrings.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Hamstrings.length; i++) {
    if (Hamstrings[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      aa9.push(current)
    }
        }
        current = Hamstrings[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      aa9.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Iliopsoas.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Iliopsoas.length; i++) {
    if (Iliopsoas[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      aa10.push(current)
    }
        }
        current = Iliopsoas[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      aa10.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Rectus_Abdominis.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Rectus_Abdominis.length; i++) {
    if (Rectus_Abdominis[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      aa11.push(current)
    }
        }
        current = Rectus_Abdominis[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      aa11.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Obliques.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Obliques.length; i++) {
    if (Obliques[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      aa12.push(current)
    }
        }
        current = Obliques[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      aa12.push(current)
    }
}

//-------------------------------------------------------------------------------------------
funct.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < funct.length; i++) {
    if (funct[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      aa13.push(current)
    }
        }
        current = funct[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      aa13.push(current)
    }
}

//-------------------------------------------------------------------------------------------
TT1.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < TT1.length; i++) {
    if (TT1[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      aa14.push(current)
    }
        }
        current = TT1[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      aa14.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Kemps.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Kemps.length; i++) {
    if (Kemps[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      aa15.push(current)
    }
        }
        current = Kemps[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      aa15.push(current)
    }
}

//-------------------------------------------------------------------------------------------
neuro.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < neuro.length; i++) {
    if (neuro[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      aa16.push(current)
    }
        }
        current = neuro[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      aa16.push(current)
    }
}

//-------------------------------------------------------------------------------------------
LL.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < LL.length; i++) {
    if (LL[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      aa17.push(current)
    }
        }
        current = LL[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      aa17.push(current)
    }
}

//-------------------------------------------------------------------------------------------
DEFICIT.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < DEFICIT.length; i++) {
    if (DEFICIT[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      aa18.push(current)
    }
        }
        current = DEFICIT[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      aa18.push(current)
    }
}

//-------------------------------------------------------------------------------------------
for(i=0;i<DEFICIT.length;i++){
          if(DEFICIT[i]==4){
           ck_1.push(DEFICIT[i])

           
        }
        }
        if(ck_1.length%2==1){
           if(oth.length>0){
      aa19.push(oth.pop())
    }
    }

//-------------------------------------------------------------------------------------------
browser
       .pause(500)
       .lumbopelvicinitialexam(text_1, observation_1, Pelvic_Unleveling_1, AOX_1, palpation_1, soft_1, Piriformis_1, Quad_Lumb_1, Paraspinals_1, 
                              Gluteus_Maximus_1, Gluteus_Medius_1, Hamstrings_1, Iliopsoas_1, Rectus_Abdominis_1, Obliques_1, other_1, funct_1, TT1_1, 
                              Kemps_1, number_1, neuro_1, LL_1,DEFICIT_1 ,oth_1, value_1,lumbo,text,aa1,aa2,AOX,aa3,soft,other,aa4,aa5,aa6,aa7,aa8,aa9,aa10,aa11,
                              aa12,aa13,aa14,aa15,number,aa16,aa17,aa18,aa19,value)
        .pause(500)      
        .end()         
},
'Result':''+function(browser){
	browser
	console.log("text---------------->"+[JSON.stringify(text.sort())==JSON.stringify(text_1.sort())])
	console.log("observation--------->"+[JSON.stringify(aa1.sort())==JSON.stringify(observation_1.sort())])
	console.log("Pelvic_Unleveling--->"+[JSON.stringify(aa2.sort())==JSON.stringify(Pelvic_Unleveling_1.sort())])
	console.log("AOX----------------->"+[AOX==AOX_1])
	console.log("palpation----------->"+[JSON.stringify(aa3.sort())==JSON.stringify(palpation_1.sort())])
	console.log("soft---------------->"+[soft==soft_1])
	console.log("Piriformis---------->"+[JSON.stringify(aa4.sort())==JSON.stringify(Piriformis_1.sort())])
	console.log("Quad_Lumb----------->"+[JSON.stringify(aa5.sort())==JSON.stringify(Quad_Lumb_1.sort())])
	console.log("Paraspinals--------->"+[JSON.stringify(aa6.sort())==JSON.stringify(Paraspinals_1.sort())])
	console.log("Gluteus_Maximus----->"+[JSON.stringify(aa7.sort())==JSON.stringify(Gluteus_Maximus_1.sort())])
	console.log("Gluteus_Medius------>"+[JSON.stringify(aa8.sort())==JSON.stringify(Gluteus_Medius_1.sort())])
	console.log("Hamstrings---------->"+[JSON.stringify(aa9.sort())==JSON.stringify(Hamstrings_1.sort())])
	console.log("Iliopsoas----------->"+[JSON.stringify(aa10.sort())==JSON.stringify(Iliopsoas_1.sort())])
	console.log("Rectus_Abdominis---->"+[JSON.stringify(aa11.sort())==JSON.stringify(Rectus_Abdominis_1.sort())])
	console.log("Obliques------------>"+[JSON.stringify(aa12.sort())==JSON.stringify(Obliques_1.sort())])
	console.log("other--------------->"+[JSON.stringify(other.sort())==JSON.stringify(other_1.sort())])
	console.log("function------------>"+[JSON.stringify(aa13.sort())==JSON.stringify(funct_1.sort())])
	console.log("TT1----------------->"+[JSON.stringify(aa14.sort(function(a, b){return a-b}))==JSON.stringify(TT1_1.sort(function(a, b){return a-b}))])
	console.log("Kemps--------------->"+[JSON.stringify(aa15.sort(function(a, b){return a-b}))==JSON.stringify(Kemps_1.sort(function(a, b){return a-b}))])
	console.log("number-------------->"+[JSON.stringify(number.sort())==JSON.stringify(number_1.sort())])
	console.log("NEUROLOGICAL-------->"+[JSON.stringify(aa16.sort())==JSON.stringify(neuro_1.sort())])
	console.log("LL------------------>"+[JSON.stringify(aa17.sort(function(a, b){return a-b}))==JSON.stringify(LL_1.sort(function(a, b){return a-b}))])
	console.log("FUNCTIONAL DEFICIT-->"+[JSON.stringify(aa18.sort())==JSON.stringify(DEFICIT_1.sort())])
	console.log("other2-------------->"+[JSON.stringify(aa19.sort())==JSON.stringify(oth_1.sort())])
	console.log("value--------------->"+[JSON.stringify(value.sort())==JSON.stringify(value_1.sort())])
	

}
}	    
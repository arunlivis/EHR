var Data = require('../EHR_Json/data.json')
var field = require('../EHR_Json/examform7.json')
var Jacksons=[].sort();              var z1=[];                     var a1=[];
var Foraminal=[].sort();             var z2=[];                     var a2=[];
var Shoulder_Depression=[].sort();   var z3=[];                     var a3=[];
var Georges=[].sort();               var z4=[];                     var a4=[];
var Bakody_Sign=[].sort();           var z5=[];                     var a5=[];
var Distraction_Test=[].sort();      var z6=[];                     var a6=[];
var Valsalva=[].sort();              var z7=[];                     var a7=[];
var Antalgia=[].sort();              var z8=[];                     var a8=[];
var Spinal_Percussion=[];            var l;                         
var Valsalva2=[].sort();             var z9=[];                     var a9=[];
var Minors_Sign=[].sort();           var z10=[];                    var a10=[];
var Braggard=[].sort();              var z11=[];                    var a11=[];
var Hoover=[].sort();                var z12=[];                    var a12=[];
var Dbl_Leg=[].sort();               var z13=[];                    var a13=[];
var Long_Leg=[].sort();              var z14=[];                    var a14=[];
var Grip=[];                  var j;                         
var Dynamometer=[];           var k;                         
var e;                        var Donoghues_r=[];
var f;                        var Donoghues_l=[];
var t;                        var slr_r=[];
var u;                        var slr_l=[];
var v;                        var wlr_r=[];
var w;                        var wlr_l=[];
//-------------------
var Adsons=[].sort();                   var z15=[];                  var a15=[];
var Rust_Sign=[].sort();                 var z16=[];                 var a16=[];
var Anvil_Test=[].sort();                var z17=[];                 var a17=[];
var Thomas=[].sort();                    var z18=[];                 var a19=[];
var Obers=[].sort();                     var z19=[];                 var a20=[];
var Milgrams_Test=[].sort();             var z20=[];                 var a21=[];
var Illiac_Compression=[].sort();        var z21=[];                 var a22=[];
var Yeomans=[].sort();                   var z22=[];                 var a23=[];
var Spinal_pain=[];               var x;
var THORACIC_text=[];             var aa;
var thoracic_Adam=[];             var ab;
var thoracic_Sheppelman=[];       var ac;
var thoracic_Sheppelman_l=[];     var ad;
var thoracic_Soto=[];             var ae;
var thoracic_AllisRR=[];          var af;
var thoracic_AllisLL=[];          var ag;
//---------------
var thoracic_Compression=[].sort();         var z23=[];           var a24=[];
var shoulder_Dugas=[].sort();               var z24=[];           var a25=[];
var shoulder_Supraspinatus=[].sort();       var z25=[];           var a26=[];
var shoulder_Codmans=[].sort();             var z26=[];           var a27=[];
var shoulder_Speed=[].sort();               var z27=[];           var a28=[];
var shoulder_Yergasons=[].sort();           var z28=[];           var a29=[];
var knees_pat=[].sort();                    var z29=[];           var a30=[];
var knees_DrawerR=[].sort();                var z30=[];           var a31=[];
var knees_DrawerL=[].sort();                var z31=[];           var a32=[];
var knees_Valgus=[].sort();                 var z32=[];           var a33=[];
var knees_Varus=[].sort();                  var z33=[];           var a34=[];
var knees_Apleys=[].sort();                 var z34=[];           var a35=[];
//---------------
var elbow_TinelsR=[].sort();                var z35=[];           var a36=[];
var elbow_TinelsL=[].sort();                var z36=[];           var a37=[];
var elbow_LigamentousR=[].sort();           var z37=[];           var a38=[];
var elbow_LigamentousL=[].sort();           var z38=[];           var a39=[];
var elbow_Golfers=[].sort();                var z39=[];           var a40=[];
var elbow_Tennis=[].sort();                 var z40=[];           var a41=[];
var ankle_Drawer=[].sort();                 var z41=[];           var a42=[];
var ankle_Thompsons=[].sort();              var z42=[];           var a43=[];
var ankle_Tinels=[].sort();                 var z43=[];           var a44=[];
var ankle_Strunskys=[].sort();              var z44=[];           var a45=[];
var ankle_Homans=[].sort();                 var z45=[];           var a46=[];
var ankle_Claudication=[].sort();           var z46=[];           var a47=[];
//---------------
var wrist_Tinels=[].sort();                 var z47=[];           var a48=[];
var wrist_Phalens=[].sort();                var z48=[];           var a49=[];
var wrist_Finkelstein=[].sort();            var z49=[];           var a50=[];
var wrist_Bracelet=[].sort();               var z50=[];           var a51=[];
var wrist_AllensR=[].sort();                var z51=[];           var a52=[];
var wrist_AllensL=[].sort();                var z52=[];           var a53=[];
var wrist_Valgus=[].sort();                 var z53=[];           var a54=[];
var wrist_Varus=[].sort();                  var z54=[];           var a55=[];

var id;

module.exports={
    login : function (browser) {
        browser 
        .login(Data.user1[2].username, Data.user1[2].password)

},
'Patient' : function(browser){
	browser  
	   .useCss()
	   .pause(500)
	   .click('a[class="firstLevel"][href="#"]')
	   .pause(300)
	   .click('a[href="/EHR/Doctor/view-patient-details-open"]')
	   .waitForElementVisible('#col0_filter' , 60000)
	   .pause(500)
	   .getText('td[class="sorting_1"]' , function(result){
	   	  id=result.value
	   	    browser
	   	       .useCss()
	   	       .click('a[onclick="postNavigateToProfile('+result.value+',1);"]')
	   })
	   .waitForElementVisible('button[onclick="openStartTreatment();"]' , 60000)
	   .pause(500)
},
'Exam Form 7':function(browser){	
   browser   
	    .useXpath()
	    .click("//*[@id='treatmentformsContent']/div[2]/span/button")
	    .useCss()
	    .waitForElementVisible('button[onclick="addSoapNotes();"]' , 60000)
	    .pause(1000)
	    .useXpath()
	    .getLocationInView("//*[@id='treatmentformsContent']/div/a[text()='Initial Exam Screen 7 -']")
        .pause(1500)
        .getLocationInView("//*[@id='treatmentformsContent']/div/a[text()='Initial Exam Screen 5 -']")
        .pause(1000)
        .click("//*[@id='treatmentformsContent']/div/a[text()='Initial Exam Screen 7 -']")
        .useCss()
	    .waitForElementVisible('button[onclick="gobackExamsList()"]' , 60000)
	    .pause(500)
	    .exam7(Jacksons, Foraminal, Shoulder_Depression, Georges, Bakody_Sign, Distraction_Test, Valsalva, Antalgia, Spinal_Percussion , Valsalva2, Minors_Sign, Braggard,
         Hoover, Dbl_Leg, Long_Leg, Grip, Dynamometer ,Adsons, Rust_Sign, Anvil_Test, Thomas, Obers, Milgrams_Test, Illiac_Compression, Yeomans, thoracic_Compression,
          shoulder_Dugas, shoulder_Supraspinatus, shoulder_Codmans, shoulder_Speed, shoulder_Yergasons, knees_pat, knees_DrawerR, knees_DrawerL, knees_Valgus,
           knees_Varus, knees_Apleys,elbow_TinelsR, elbow_TinelsL, elbow_LigamentousR, elbow_LigamentousL, elbow_Golfers, elbow_Tennis, ankle_Drawer, ankle_Thompsons,
            ankle_Tinels, ankle_Strunskys, ankle_Homans, ankle_Claudication, wrist_Tinels, wrist_Phalens, wrist_Finkelstein, wrist_Bracelet, wrist_AllensR, 
            wrist_AllensL, wrist_Valgus, wrist_Varus)
        .useCss()
        .pause(500)
        .getLocationInView('#cervicalSpinalPercuss_id')
        .pause(500)
        .useXpath()
        .getLocationInView("//*[@id='formid']/div/div/div[1]/div/input")
        .pause(500)
        for(i=0; i<2; i++){
            a=Math.floor((Math.random()*3)+1)
            Jacksons.push(a)
            b=Math.floor((Math.random()*3)+1)
            Foraminal.push(b)
            c=Math.floor((Math.random()*3)+1)
            Shoulder_Depression.push(c)
            d=Math.floor((Math.random()*3)+1)
            Georges.push(d)
          browser
        .useCss()
        .click('input[name="'+field.jack[a-1]+'"][value="1"]')
        .click('input[name="'+field.foram[b-1]+'"][value="1"]')
        .click('input[name="'+field.shoulder[c-1]+'"][value="1"]')
        .click('input[name="'+field.geor[d-1]+'"][value="1"]')
       }
        e=Math.floor((Math.random()*2)+1)
        f=Math.floor((Math.random()*2)+1)
        browser
        .useCss()
        .click('input[name="'+field.dono1[e-1]+'"][value="'+e+'"]')
        .click('input[name="'+field.dono2[f-1]+'"][value="'+f+'"]')
        for(i=0; i<2; i++){
            g=Math.floor((Math.random()*3)+1)
            Distraction_Test.push(g)
          hh=Math.floor((Math.random()*3)+1)
          Bakody_Sign.push(hh)
            
            browser
            .useCss()
            .click('input[name="'+field.bakody[hh-1]+'"][value="1"]')
            .click('input[name="'+field.distraction[g-1]+'"][value="1"]')
        }
        for(i=0; i<2; i++){
          m=Math.floor((Math.random()*2)+1)
          Antalgia.push(m)
          n=Math.floor((Math.random()*2)+1)
          Valsalva2.push(n)
          o=Math.floor((Math.random()*2)+1)
          Minors_Sign.push(o)
          p=Math.floor((Math.random()*2)+1)
          Braggard.push(p)
          q=Math.floor((Math.random()*2)+1)
          Hoover.push(q)
          
          browser
          .useCss()
          .click('input[name="'+field.antal[m-1]+'"][value="1"]')
          .click('input[name="'+field.valsa1[n-1]+'"][value="1"]')
          .click('input[name="'+field.minors[o-1]+'"][value="1"]')
          .click('input[name="'+field.brag[p-1]+'"][value="1"]')
          .click('input[name="'+field.hoov[q-1]+'"][value="1"]')

         
        }
        t=Math.floor((Math.random()*3)+1)
        u=Math.floor((Math.random()*3)+1)
        v=Math.floor((Math.random()*3)+1)
        w=Math.floor((Math.random()*3)+1)
        l=Math.floor((Math.random()*3)+0)
        browser
        .useCss()
        .click('input[name="lumbarSlrRight"][value="'+t+'"]')
        .click('input[name="lumbarSlrLeft"][value="'+u+'"]')
        .click('input[name="lumbarWlrRight"][value="'+v+'"]')
        .click('input[name="lumbarWlrLeft"][value="'+w+'"]')
        .clearValue('#lumbarSpinalPercuss_id')
        .setValue('#lumbarSpinalPercuss_id' , field.val[l])
        j=Math.floor((Math.random()*3)+0)
        k=Math.floor((Math.random()*3)+0)
        
        browser
        .useCss()
        .clearValue('#cervicalGripDynamomText1_id')
        .setValue('#cervicalGripDynamomText1_id' , field.val[j])
        .clearValue('#cervicalGripDynamomText2_id')
        .setValue('#cervicalGripDynamomText2_id' , field.val[k])

        for(i=0; i<2; i++){
          r=Math.floor((Math.random()*2)+1)
          Dbl_Leg.push(r)
          s=Math.floor((Math.random()*2)+1)
          Long_Leg.push(s)
          h=Math.floor((Math.random()*3)+1)
          Valsalva.push(h)


          browser
            browser
              .useCss()
              .click('input[name="'+field.dbl[r-1]+'"][value="1"]')
              .click('input[name="'+field.long[s-1]+'"][value="1"]')
              .click('input[name="'+field.valsa[h-1]+'"][value="1"]')
        }
        x=Math.floor((Math.random()*3)+0)
      browser
         .pause(500)
         .getLocationInView('#thoracicSpinalPercuss_id')
         .pause(500)
         .getLocationInView('#cervicalDistractionTest1_id')
         .pause(500)
         .clearValue('#cervicalSpinalPercuss_id')
         .setValue('#cervicalSpinalPercuss_id' , field.val[x])

         for(i=0;i<2;i++){
                y=Math.floor((Math.random()*3)+1)
                z=Math.floor((Math.random()*3)+1)
                ah=Math.floor((Math.random()*2)+1)
                ai=Math.floor((Math.random()*2)+1)
                aj=Math.floor((Math.random()*2)+1)
                 Adsons.push(y)
                 Rust_Sign.push(z)
                 Anvil_Test.push(ah)            
                 Thomas.push(ai)                  
                 Obers.push(aj) 
             browser                
                 .useCss()
                 .click('input[name="'+field.anvil[ah-1]+'"][value="1"]')
                 .click('input[name="'+field.adson[y-1]+'"][value="1"]')
                 .click('input[name="'+field.rust[z-1]+'"][value="1"]')
                 .click('input[name="'+field.thomas[ai-1]+'"][value="1"]')
                 .click('input[name="'+field.obers[aj-1]+'"][value="1"]')
         }
         aa=Math.floor((Math.random()*3)+0)
     browser
       .useCss()
       .pause(500) 
       .getLocationInView('#thoracicCompressTest1_id')   
       .pause(500)  
       .getLocationInView('#lumbarThomas1_id')  
       .pause(500)    
       .clearValue('#thoracicSpinalPercuss_id')
       .setValue('#thoracicSpinalPercuss_id' , field.val[aa])
        
        
        
        ab=Math.floor((Math.random()*2)+1)
        ac=Math.floor((Math.random()*2)+1)
        ad=Math.floor((Math.random()*2)+1)
        ae=Math.floor((Math.random()*2)+1)
        af=Math.floor((Math.random()*2)+1)
        ag=Math.floor((Math.random()*2)+1)
        
        browser
          .useCss()
          .click('input[name="thoracicAdamsTest"][value="'+ab+'"]')
          .click('input[name="thoracicSheppelSignRight"][value="'+ac+'"]')
          .click('input[name="thoracicSheppelSignLeft"][value="'+ad+'"]')
          .click('input[name="thoracicSotoHall"][value="'+ae+'"]')
          .click('input[name="lumbarAllisSignRight"][value="'+af+'"]')
          .click('input[name="lumbarAllisSignLeft"][value="'+ag+'"]')

       for(i=0; i<2; i++){
         an=Math.floor((Math.random()*3)+1)
          ak=Math.floor((Math.random()*2)+1)
          al=Math.floor((Math.random()*2)+1)
          am=Math.floor((Math.random()*2)+1)
                   
            Milgrams_Test.push(ak)       
            Illiac_Compression.push(al)   
            Yeomans.push(am) 
            thoracic_Compression.push(an)
         browser   
           .useCss()
           .click('input[name="'+field.compress[an-1]+'"][value="1"]')
           .click('input[name="'+field.milgram[ak-1]+'"][value="1"]')
           .click('input[name="'+field.llliac[al-1]+'"][value="1"]')
           .click('input[name="'+field.yeomans[am-1]+'"][value="1"]')

       }   

        

    
        browser
 .useCss()
 .pause(500)
 .getLocationInView('#elbowsTinelsRight1_id')
 .pause(500)
 .getLocationInView('#thoracicSheppelSignLeft1_id')
 .pause(500)

      for(i=0; i<3; i++){
        
        ao=Math.floor((Math.random()*2)+1)
        ap=Math.floor((Math.random()*2)+1)
        aq=Math.floor((Math.random()*2)+1)
        ar=Math.floor((Math.random()*2)+1)
        as=Math.floor((Math.random()*2)+1)
        at=Math.floor((Math.random()*2)+1)
        au=Math.floor((Math.random()*2)+1)
        av=Math.floor((Math.random()*2)+1)
        aw=Math.floor((Math.random()*2)+1)
        ax=Math.floor((Math.random()*2)+1)
        ay=Math.floor((Math.random()*4)+1)
            
            shoulder_Dugas.push(ao)
            shoulder_Supraspinatus.push(ap)
            shoulder_Codmans.push(aq)
            shoulder_Speed.push(ar)
            shoulder_Yergasons.push(as)
            knees_pat.push(at)
            knees_DrawerR.push(au)
            knees_DrawerL.push(av)            
            knees_Valgus.push(aw)
            knees_Varus.push(ax)
            knees_Apleys.push(ay)
        browser
        .useCss()
        .click('input[name="'+field.dugas[ao-1]+'"][value="1"]')
        .click('input[name="'+field.supras[ap-1]+'"][value="1"]')
        .click('input[name="'+field.codman[aq-1]+'"][value="1"]')
        .click('input[name="'+field.speed[ar-1]+'"][value="1"]')
        .click('input[name="'+field.yerga[as-1]+'"][value="1"]')
        .click('input[name="'+field.pat[at-1]+'"][value="1"]')
        .click('input[name="'+field.rdraw[au-1]+'"][value="1"]')
        .click('input[name="'+field.ldraw[av-1]+'"][value="1"]')
        .click('input[name="'+field.valgus[aw-1]+'"][value="1"]')
        .click('input[name="'+field.varus[ax-1]+'"][value="1"]')
        .click('input[name="'+field.aple[ay-1]+'"][value="1"]')        
        
      }
      browser
        .useCss()
        .pause(500)
        .getLocationInView('#elbowsTennisElbow1_id')
        .pause(500)
        .getLocationInView('#shoulderSpeedTest1_id')
        .pause(500)

      for(i=0; i<2; i++){
        az=Math.floor((Math.random()*2)+1)
        ba=Math.floor((Math.random()*2)+1)
        bb=Math.floor((Math.random()*2)+1)
        bc=Math.floor((Math.random()*2)+1)
        bd=Math.floor((Math.random()*2)+1)
        be=Math.floor((Math.random()*2)+1)
        bf=Math.floor((Math.random()*2)+1)
        bg=Math.floor((Math.random()*2)+1)
        bh=Math.floor((Math.random()*2)+1)
        bi=Math.floor((Math.random()*2)+1)
        bj=Math.floor((Math.random()*2)+1)
        bk=Math.floor((Math.random()*2)+1)
           elbow_TinelsR.push(az)
           elbow_TinelsL.push(ba)
           elbow_LigamentousR.push(bb)
           elbow_LigamentousL.push(bc)
           elbow_Golfers.push(bd)
           elbow_Tennis.push(be)
           ankle_Drawer.push(bf)
           ankle_Thompsons.push(bg)
           ankle_Tinels.push(bh)
           ankle_Strunskys.push(bi)
           ankle_Homans.push(bj)
           ankle_Claudication.push(bk)
        browser
        .useCss()
        .click('input[name="'+field.el_tine_r[az-1]+'"][value="1"]')
        .click('input[name="'+field.el_tine_l[ba-1]+'"][value="1"]')
        .click('input[name="'+field.el_liga_r[bb-1]+'"][value="1"]')
        .click('input[name="'+field.el_liga_l[bc-1]+'"][value="1"]')
        .click('input[name="'+field.el_gol[bd-1]+'"][value="1"]')
        .click('input[name="'+field.el_tennis[be-1]+'"][value="1"]')
        .click('input[name="'+field.an_draw[bf-1]+'"][value="1"]')
        .click('input[name="'+field.an_thomp[bg-1]+'"][value="1"]')
        .click('input[name="'+field.an_tine[bh-1]+'"][value="1"]')
        .click('input[name="'+field.an_strun[bi-1]+'"][value="1"]')
        .click('input[name="'+field.an_homans[bj-1]+'"][value="1"]')
        .click('input[name="'+field.an_claud[bk-1]+'"][value="1"]')

      }
      browser
          .useCss()
          .pause(500)
          .getLocationInView('#wristsValgusVarusRight1_id')
          .pause(500)
          .getLocationInView('#elbowsGolfersElbow1_id')
          .pause(500)

          for(i=0; i<2; i++){
            bl=Math.floor((Math.random()*2)+1)
            bm=Math.floor((Math.random()*2)+1)
            bn=Math.floor((Math.random()*2)+1)
            bo=Math.floor((Math.random()*2)+1)
            bp=Math.floor((Math.random()*2)+1)
            bq=Math.floor((Math.random()*2)+1)
            br=Math.floor((Math.random()*2)+1)
            bs=Math.floor((Math.random()*2)+1)
                 wrist_Tinels.push(bl)
                 wrist_Phalens.push(bm)
                 wrist_Finkelstein.push(bn)
                 wrist_Bracelet.push(bo)
                 wrist_AllensR.push(bp)
                 wrist_AllensL.push(bq)
                 wrist_Valgus.push(br)
                 wrist_Varus.push(bs)
            browser
              .useCss()
              .click('input[name="'+field.wr_tine[bl-1]+'"][value="1"]')
              .click('input[name="'+field.wr_phal[bm-1]+'"][value="1"]')
              .click('input[name="'+field.wr_fink[bn-1]+'"][value="1"]')
              .click('input[name="'+field.wr_brac[bo-1]+'"][value="1"]')
              .click('input[name="'+field.wr_alle_r[bp-1]+'"][value="1"]')
              .click('input[name="'+field.wr_alle_l[bq-1]+'"][value="1"]')
              .click('input[name="'+field.wr_valgus[br-1]+'"][value="1"]')
              .click('input[name="'+field.wr_varus[bs-1]+'"][value="1"]')

          }



          browser
             .useCss()
             .pause(1000)
             .getLocationInView('button[class="btn btn-primary"][type="submit"]')
             .pause(1000)
             .useXpath()
             .getLocationInView("//*[@id='formid']/div/div/div[35]/div[316]/div[2]/input")
             .useCss()
             .pause(1000)
             .click('button[class="btn btn-primary"][type="submit"]')
             .useXpath()
             .waitForElementVisible("//*[@id='treatmentformsContent']/div/a[text()='Initial Exam Screen 1 -']" , 60000)
             .pause(500)
             .getLocationInView("//*[@id='treatmentformsContent']/div/a[text()='Initial Exam Screen 8 -']")
             .pause(500)
             .getLocationInView("//*[@id='treatmentformsContent']/div/a[text()='Initial Exam Screen 4 -']")
             .pause(500)
             .click("//*[@id='treatmentformsContent']/div/a[text()='Initial Exam Screen 7 -']")
             .useCss()
	         .waitForElementVisible('button[onclick="gobackExamsList()"]' , 60000)
	         .pause(500)
             

},
'check':function(browser){
  browser
Jacksons.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Jacksons.length; i++) {
    if (Jacksons[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      a1.push(current)
    }
        }
        current = Jacksons[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      a1.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Foraminal.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Foraminal.length; i++) {
    if (Foraminal[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      a2.push(current)
    }
        }
        current = Foraminal[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      a2.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Shoulder_Depression.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Shoulder_Depression.length; i++) {
    if (Shoulder_Depression[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      a3.push(current)
    }
        }
        current = Shoulder_Depression[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      a3.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Georges.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Georges.length; i++) {
    if (Georges[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      a4.push(current)
    }
        }
        current = Georges[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      a4.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Bakody_Sign.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Bakody_Sign.length; i++) {
    if (Bakody_Sign[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      a5.push(current)
    }
        }
        current = Bakody_Sign[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      a5.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Distraction_Test.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Distraction_Test.length; i++) {
    if (Distraction_Test[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      a6.push(current)
    }
        }
        current = Distraction_Test[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      a6.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Valsalva.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Valsalva.length; i++) {
    if (Valsalva[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      a7.push(current)
    }
        }
        current = Valsalva[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      a7.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Antalgia.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Antalgia.length; i++) {
    if (Antalgia[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      a8.push(current)
    }
        }
        current = Antalgia[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      a8.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Valsalva2.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Valsalva2.length; i++) {
    if (Valsalva2[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      a9.push(current)
    }
        }
        current = Valsalva2[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      a9.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Minors_Sign.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Minors_Sign.length; i++) {
    if (Minors_Sign[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      a10.push(current)
    }
        }
        current = Minors_Sign[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      a10.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Braggard.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Braggard.length; i++) {
    if (Braggard[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      a11.push(current)
    }
        }
        current = Braggard[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      a11.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Hoover.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Hoover.length; i++) {
    if (Hoover[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      a12.push(current)
    }
        }
        current = Hoover[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      a12.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Dbl_Leg.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Dbl_Leg.length; i++) {
    if (Dbl_Leg[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      a13.push(current)
    }
        }
        current = Dbl_Leg[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      a13.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Long_Leg.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Long_Leg.length; i++) {
    if (Long_Leg[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      a14.push(current)
    }
        }
        current = Long_Leg[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      a14.push(current)
    }
}

//-------------------------------------------------------------------------------------------///////////////////////////////////////////////////
Adsons.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Adsons.length; i++) {
    if (Adsons[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      a15.push(current)
    }
        }
        current = Adsons[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      a15.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Rust_Sign.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Rust_Sign.length; i++) {
    if (Rust_Sign[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      a16.push(current)
    }
        }
        current = Rust_Sign[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      a16.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Anvil_Test.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Anvil_Test.length; i++) {
    if (Anvil_Test[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      a17.push(current)
    }
        }
        current = Anvil_Test[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      a17.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Thomas.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Thomas.length; i++) {
    if (Thomas[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      a19.push(current)
    }
        }
        current = Thomas[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      a19.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Obers.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Obers.length; i++) {
    if (Obers[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      a20.push(current)
    }
        }
        current = Obers[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      a20.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Milgrams_Test.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Milgrams_Test.length; i++) {
    if (Milgrams_Test[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      a21.push(current)
    }
        }
        current = Milgrams_Test[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      a21.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Illiac_Compression.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Illiac_Compression.length; i++) {
    if (Illiac_Compression[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      a22.push(current)
    }
        }
        current = Illiac_Compression[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      a22.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Yeomans.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Yeomans.length; i++) {
    if (Yeomans[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      a23.push(current)
    }
        }
        current = Yeomans[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      a23.push(current)
    }
}

//-------------------------------------------------------------------------------------------
thoracic_Compression.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < thoracic_Compression.length; i++) {
    if (thoracic_Compression[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      a24.push(current)
    }
        }
        current = thoracic_Compression[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      a24.push(current)
    }
}

//-------------------------------------------------------------------------------------------
shoulder_Dugas.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < shoulder_Dugas.length; i++) {
    if (shoulder_Dugas[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      a25.push(current)
    }
        }
        current = shoulder_Dugas[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      a25.push(current)
    }
}

//-------------------------------------------------------------------------------------------
shoulder_Supraspinatus.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < shoulder_Supraspinatus.length; i++) {
    if (shoulder_Supraspinatus[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      a26.push(current)
    }
        }
        current = shoulder_Supraspinatus[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      a26.push(current)
    }
}

//-------------------------------------------------------------------------------------------
shoulder_Codmans.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < shoulder_Codmans.length; i++) {
    if (shoulder_Codmans[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      a27.push(current)
    }
        }
        current = shoulder_Codmans[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      a27.push(current)
    }
}

//-------------------------------------------------------------------------------------------
shoulder_Speed.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < shoulder_Speed.length; i++) {
    if (shoulder_Speed[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      a28.push(current)
    }
        }
        current = shoulder_Speed[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      a28.push(current)
    }
}

//-------------------------------------------------------------------------------------------
shoulder_Yergasons.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < shoulder_Yergasons.length; i++) {
    if (shoulder_Yergasons[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      a29.push(current)
    }
        }
        current = shoulder_Yergasons[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      a29.push(current)
    }
}

//-------------------------------------------------------------------------------------------
knees_pat.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < knees_pat.length; i++) {
    if (knees_pat[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      a30.push(current)
    }
        }
        current = knees_pat[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      a30.push(current)
    }
}

//-------------------------------------------------------------------------------------------
knees_DrawerR.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < knees_DrawerR.length; i++) {
    if (knees_DrawerR[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      a31.push(current)
    }
        }
        current = knees_DrawerR[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      a31.push(current)
    }
}

//-------------------------------------------------------------------------------------------
knees_DrawerL.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < knees_DrawerL.length; i++) {
    if (knees_DrawerL[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      a32.push(current)
    }
        }
        current = knees_DrawerL[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      a32.push(current)
    }
}

//-------------------------------------------------------------------------------------------
knees_Valgus.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < knees_Valgus.length; i++) {
    if (knees_Valgus[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      a33.push(current)
    }
        }
        current = knees_Valgus[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      a33.push(current)
    }
}

//-------------------------------------------------------------------------------------------
knees_Varus.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < knees_Varus.length; i++) {
    if (knees_Varus[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      a34.push(current)
    }
        }
        current = knees_Varus[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      a34.push(current)
    }
}

//-------------------------------------------------------------------------------------------
knees_Apleys.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < knees_Apleys.length; i++) {
    if (knees_Apleys[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      a35.push(current)
    }
        }
        current = knees_Apleys[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      a35.push(current)
    }
}

//-------------------------------------------------------------------------------------------
elbow_TinelsR.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < elbow_TinelsR.length; i++) {
    if (elbow_TinelsR[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      a36.push(current)
    }
        }
        current = elbow_TinelsR[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      a36.push(current)
    }
}

//-------------------------------------------------------------------------------------------
elbow_TinelsL.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < elbow_TinelsL.length; i++) {
    if (elbow_TinelsL[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      a37.push(current)
    }
        }
        current = elbow_TinelsL[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      a37.push(current)
    }
}

//-------------------------------------------------------------------------------------------
elbow_LigamentousR.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < elbow_LigamentousR.length; i++) {
    if (elbow_LigamentousR[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      a38.push(current)
    }
        }
        current = elbow_LigamentousR[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      a38.push(current)
    }
}

//-------------------------------------------------------------------------------------------
elbow_LigamentousL.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < elbow_LigamentousL.length; i++) {
    if (elbow_LigamentousL[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      a39.push(current)
    }
        }
        current = elbow_LigamentousL[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      a39.push(current)
    }
}

//-------------------------------------------------------------------------------------------
elbow_Golfers.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < elbow_Golfers.length; i++) {
    if (elbow_Golfers[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      a40.push(current)
    }
        }
        current = elbow_Golfers[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      a40.push(current)
    }
}

//-------------------------------------------------------------------------------------------
elbow_Tennis.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < elbow_Tennis.length; i++) {
    if (elbow_Tennis[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      a41.push(current)
    }
        }
        current = elbow_Tennis[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      a41.push(current)
    }
}

//-------------------------------------------------------------------------------------------
ankle_Drawer.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < ankle_Drawer.length; i++) {
    if (ankle_Drawer[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      a42.push(current)
    }
        }
        current = ankle_Drawer[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      a42.push(current)
    }
}

//-------------------------------------------------------------------------------------------
ankle_Thompsons.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < ankle_Thompsons.length; i++) {
    if (ankle_Thompsons[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      a43.push(current)
    }
        }
        current = ankle_Thompsons[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      a43.push(current)
    }
}

//-------------------------------------------------------------------------------------------
ankle_Tinels.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < ankle_Tinels.length; i++) {
    if (ankle_Tinels[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      a44.push(current)
    }
        }
        current = ankle_Tinels[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      a44.push(current)
    }
}

//-------------------------------------------------------------------------------------------
ankle_Strunskys.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < ankle_Strunskys.length; i++) {
    if (ankle_Strunskys[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      a45.push(current)
    }
        }
        current = ankle_Strunskys[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      a45.push(current)
    }
}

//-------------------------------------------------------------------------------------------
ankle_Homans.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < ankle_Homans.length; i++) {
    if (ankle_Homans[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      a46.push(current)
    }
        }
        current = ankle_Homans[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      a46.push(current)
    }
}

//-------------------------------------------------------------------------------------------
ankle_Claudication.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < ankle_Claudication.length; i++) {
    if (ankle_Claudication[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      a47.push(current)
    }
        }
        current = ankle_Claudication[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      a47.push(current)
    }
}

//-------------------------------------------------------------------------------------------
wrist_Tinels.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < wrist_Tinels.length; i++) {
    if (wrist_Tinels[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      a48.push(current)
    }
        }
        current = wrist_Tinels[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      a48.push(current)
    }
}

//-------------------------------------------------------------------------------------------
wrist_Phalens.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < wrist_Phalens.length; i++) {
    if (wrist_Phalens[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      a49.push(current)
    }
        }
        current = wrist_Phalens[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      a49.push(current)
    }
}

//-------------------------------------------------------------------------------------------
wrist_Finkelstein.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < wrist_Finkelstein.length; i++) {
    if (wrist_Finkelstein[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      a50.push(current)
    }
        }
        current = wrist_Finkelstein[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      a50.push(current)
    }
}

//-------------------------------------------------------------------------------------------
wrist_Bracelet.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < wrist_Bracelet.length; i++) {
    if (wrist_Bracelet[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      a51.push(current)
    }
        }
        current = wrist_Bracelet[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      a51.push(current)
    }
}

//-------------------------------------------------------------------------------------------
wrist_AllensR.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < wrist_AllensR.length; i++) {
    if (wrist_AllensR[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      a52.push(current)
    }
        }
        current = wrist_AllensR[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      a52.push(current)
    }
}

//-------------------------------------------------------------------------------------------
wrist_AllensL.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < wrist_AllensL.length; i++) {
    if (wrist_AllensL[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      a53.push(current)
    }
        }
        current = wrist_AllensL[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      a53.push(current)
    }
}

//-------------------------------------------------------------------------------------------
wrist_Valgus.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < wrist_Valgus.length; i++) {
    if (wrist_Valgus[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      a54.push(current)
    }
        }
        current = wrist_Valgus[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      a54.push(current)
    }
}

//-------------------------------------------------------------------------------------------
wrist_Varus.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < wrist_Varus.length; i++) {
    if (wrist_Varus[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      a55.push(current)
    }
        }
        current = wrist_Varus[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      a55.push(current)
    }
}

//-------------------------------------------------------------------------------------------
browser
.pause(500)
    .examform7(field,a1,a2,a3,a4,e,f,a5,a6,a8,a9,a10,a11,a12,t,u,v,w,l,j,k,a13,a14,a7,x,a17,a15,a16,a19,a20,aa,ab,ac,ad,ae,af,ag,a24,a21,a22,a23,a25,a26,a27,
                a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,a49,a50,a51,a52,a53,a54,a55)
    .pause(500)
    .end()

},
'Result':''+function(browser){
	browser
	console.log("Jacksons--------------->"+[JSON.stringify(z1.sort())==JSON.stringify(a1.sort())])
	console.log("Foraminal-------------->"+[JSON.stringify(z2.sort())==JSON.stringify(a2.sort())])
	console.log("Shoulder_Depression---->"+[JSON.stringify(z3.sort())==JSON.stringify(a3.sort())])
	console.log("Georges---------------->"+[JSON.stringify(z4.sort())==JSON.stringify(a4.sort())])
  console.log("Bakody_Sign------------>"+[JSON.stringify(z5.sort())==JSON.stringify(a5.sort())])
	console.log("Distraction_Test------->"+[JSON.stringify(z6.sort())==JSON.stringify(a6.sort())])
	console.log("Valsalva--------------->"+[JSON.stringify(z7.sort())==JSON.stringify(a7.sort())])
	console.log("Antalgia--------------->"+[JSON.stringify(z8.sort())==JSON.stringify(a8.sort())])
	console.log("Spinal_Percussion------>"+(Spinal_Percussion==l))
	console.log("Valsalva2-------------->"+[JSON.stringify(z9.sort())==JSON.stringify(a9.sort())])
	console.log("Minors_Sign------------>"+[JSON.stringify(z10.sort())==JSON.stringify(a10.sort())])
	console.log("Braggard--------------->"+[JSON.stringify(z11.sort())==JSON.stringify(a11.sort())])
	console.log("Hoover----------------->"+[JSON.stringify(z12.sort())==JSON.stringify(a12.sort())])
  console.log("Dbl_Leg---------------->"+[JSON.stringify(z13.sort())==JSON.stringify(a13.sort())])
	console.log("Long_Leg--------------->"+[JSON.stringify(z14.sort())==JSON.stringify(a14.sort())])
	console.log("Grip------------------->"+(Grip==j))
	console.log("Dynamometer------------>"+(Dynamometer==k))
	console.log("Donoghues_r------------>"+(Donoghues_r==e))
  console.log("Donoghues_l------------>"+(Donoghues_l==f))
  console.log("slr_r------------------>"+(slr_r==t))
  console.log("slr_l------------------>"+(slr_l==u))
  console.log("wlr_r------------------>"+(wlr_r==v))
  console.log("wlr_l------------------>"+(wlr_l==w))
  console.log("Adsons----------------->"+[JSON.stringify(z15.sort())==JSON.stringify(a15.sort())])
  console.log("Rust_Sign-------------->"+[JSON.stringify(z16.sort())==JSON.stringify(a16.sort())])
  console.log("Anvil_Test------------->"+[JSON.stringify(z17.sort())==JSON.stringify(a17.sort())])
  console.log("Thomas----------------->"+[JSON.stringify(z18.sort())==JSON.stringify(a19.sort())])
  console.log("Obers------------------>"+[JSON.stringify(z19.sort())==JSON.stringify(a20.sort())])
  console.log("Milgrams_Test---------->"+[JSON.stringify(z20.sort())==JSON.stringify(a21.sort())])
  console.log("Illiac_Compression----->"+[JSON.stringify(z21.sort())==JSON.stringify(a22.sort())])
  console.log("Yeomans---------------->"+[JSON.stringify(z22.sort())==JSON.stringify(a23.sort())])
  console.log("Spinal_pain------------>"+(Spinal_pain==x))              
  console.log("THORACIC_text---------->"+(THORACIC_text==aa))             
  console.log("thoracic_Adam---------->"+(thoracic_Adam==ab))           
  console.log("thoracic_Sheppelman---->"+(thoracic_Sheppelman==ac))     
  console.log("thoracic_Sheppelman_l-->"+(thoracic_Sheppelman_l==ad)) 
  console.log("thoracic_Soto---------->"+(thoracic_Soto==ae))            
  console.log("thoracic_AllisRR------->"+(thoracic_AllisRR==af))       
  console.log("thoracic_AllisLL------->"+(thoracic_AllisLL==ag))    
  console.log("thoracic_Compression--->"+[JSON.stringify(z23.sort())==JSON.stringify(a24.sort())])
  console.log("shoulder_Dugas--------->"+[JSON.stringify(z24.sort())==JSON.stringify(a25.sort())])
  console.log("shoulder_Supraspinatus->"+[JSON.stringify(z25.sort())==JSON.stringify(a26.sort())])
  console.log("shoulder_Codmans------->"+[JSON.stringify(z26.sort())==JSON.stringify(a27.sort())])
  console.log("shoulder_Speed--------->"+[JSON.stringify(z27.sort())==JSON.stringify(a28.sort())])
  console.log("shoulder_Yergasons----->"+[JSON.stringify(z28.sort())==JSON.stringify(a29.sort())])
  console.log("knees_pat-------------->"+[JSON.stringify(z29.sort())==JSON.stringify(a30.sort())])
  console.log("knees_DrawerR---------->"+[JSON.stringify(z30.sort())==JSON.stringify(a31.sort())])
  console.log("knees_DrawerL---------->"+[JSON.stringify(z31.sort())==JSON.stringify(a32.sort())])
  console.log("knees_Valgus----------->"+[JSON.stringify(z32.sort())==JSON.stringify(a33.sort())])
  console.log("knees_Varus------------>"+[JSON.stringify(z33.sort())==JSON.stringify(a34.sort())])
  console.log("knees_Apleys----------->"+[JSON.stringify(z34.sort())==JSON.stringify(a35.sort())])
  console.log("elbow_TinelsR---------->"+[JSON.stringify(z35.sort())==JSON.stringify(a36.sort())])
  console.log("elbow_TinelsL---------->"+[JSON.stringify(z36.sort())==JSON.stringify(a37.sort())])
  console.log("elbow_LigamentousR----->"+[JSON.stringify(z37.sort())==JSON.stringify(a38.sort())])
  console.log("elbow_LigamentousL----->"+[JSON.stringify(z38.sort())==JSON.stringify(a39.sort())])
  console.log("elbow_Golfers---------->"+[JSON.stringify(z39.sort())==JSON.stringify(a40.sort())])
  console.log("elbow_Tennis----------->"+[JSON.stringify(z40.sort())==JSON.stringify(a41.sort())])
  console.log("ankle_Drawer----------->"+[JSON.stringify(z41.sort())==JSON.stringify(a42.sort())])
  console.log("ankle_Thompsons-------->"+[JSON.stringify(z42.sort())==JSON.stringify(a43.sort())])
  console.log("ankle_Tinels----------->"+[JSON.stringify(z43.sort())==JSON.stringify(a44.sort())])
  console.log("ankle_Strunskys-------->"+[JSON.stringify(z44.sort())==JSON.stringify(a45.sort())])
  console.log("ankle_Homans----------->"+[JSON.stringify(z45.sort())==JSON.stringify(a46.sort())])
  console.log("ankle_Claudication----->"+[JSON.stringify(z46.sort())==JSON.stringify(a47.sort())])
  console.log("wrist_Tinels----------->"+[JSON.stringify(z47.sort())==JSON.stringify(a48.sort())])
  console.log("wrist_Phalens---------->"+[JSON.stringify(z48.sort())==JSON.stringify(a49.sort())])
  console.log("wrist_Finkelstein------>"+[JSON.stringify(z49.sort())==JSON.stringify(a50.sort())])
  console.log("wrist_Bracelet--------->"+[JSON.stringify(z50.sort())==JSON.stringify(a51.sort())])
  console.log("wrist_AllensR---------->"+[JSON.stringify(z51.sort())==JSON.stringify(a52.sort())])
  console.log("wrist_AllensL---------->"+[JSON.stringify(z52.sort())==JSON.stringify(a53.sort())])
  console.log("wrist_Valgus----------->"+[JSON.stringify(z53.sort())==JSON.stringify(a54.sort())])
  console.log("wrist_Varus------------>"+[JSON.stringify(z54.sort())==JSON.stringify(a55.sort())])


}
}	    
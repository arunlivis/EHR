var Data = require('../EHR_Json/data.json')
var tho = require('../EHR_Json/thoracic.json')

var pal=[];                            var pal_1=[];                            var abc1=[];        
var Acromion=[];                       var Acromion_1=[];                       var abc2=[];          
var Inferior_Pole=[];                  var Inferior_Pole_1=[];                  var abc3=[];       
var Iliac_Crest=[];                    var Iliac_Crest_1=[];                    var abc4=[];         
var Rib_Humping=[];                    var Rib_Humping_1=[];                    var abc5=[];          
var Rectus_Abdominis=[];               var Rectus_Abdominis_1=[];               var abc6=[];               
var Obliques=[];                       var Obliques_1=[];                       var abc7=[];      
var Levator_Scapulae=[];               var Levator_Scapulae_1=[];               var abc8=[];            
var Serratus_Anterior=[];              var Serratus_Anterior_1=[];              var abc9=[];                  
var Pectoralis_Major=[];               var Pectoralis_Major_1=[];               var abc10=[];                 
var Trapezius=[];                      var Trapezius_1=[];                      var abc11=[];                  
var Rhomboids=[];                      var Rhomboids_1=[];                      var abc12=[];              
var Pectoralis_Minor=[];               var Pectoralis_Minor_1=[];               var abc13=[];             
var Paraspinals=[];                    var Paraspinals_1=[];                    var abc14=[];             
var functional_range=[];               var functional_range_1=[];               var abc15=[];               
var subluxation_range=[];              var subluxation_range_1=[];              var abc16=[];              
var orthopedic_range=[];               var orthopedic_range_1=[];               var abc17=[];               
var t1_t2=[];                          var t1_t2_1=[];                          var abc18=[];                                                                  
var t3_t4=[];                          var t3_t4_1=[];                          var abc19=[];                      
var t5_t6=[];                          var t5_t6_1=[];                          var abc20=[];                      
var t7_t8=[];                          var t7_t8_1=[];                          var abc21=[];                      
var t9_t10=[];                         var t9_t10_1=[];                         var abc22=[];                       
var t11_t12=[];                        var t11_t12_1=[];                        var abc23=[];                        
var Adams_Sign=[];                     var Adams_Sign_1=[];                     var abc24=[];                         
var Schepelman=[];                     var Schepelman_1=[];                     var abc25=[];                         
var Valsalva=[];                       var Valsalva_1=[];                       var abc26=[];                       
var dejerines_Triad=[];                var dejerines_Triad_1=[];                var abc27=[];                              
var Soto_Hall=[];                      var Soto_Hall_1=[];                      var abc28=[];                        
var Sternal_Compression=[];            var Sternal_Compression_1=[];            var abc29=[];                                       
var Beevors_Sign=[];                   var Beevors_Sign_1=[];                   var abc30=[];                                
var nurological=[];                    var nurological_1=[];                    var abc31=[];                               
var intercostal=[];                    var intercostal_1=[];                    var abc32=[];                               
var functional_deficit=[];             var functional_deficit_1=[];             var abc33=[];                                      
var functional_deficit_other=[];       var functional_deficit_other_1=[];       var abc34=[];                                     
var muscleSymmetryid;                  var muscleSymmetryid_1=[];
var swellingDiscolorationid;           var swellingDiscolorationid_1=[];
var other;                             var other_1=[];
var Flexion=[];                        var Flexion_1=[];
var note;                              var note_1=[];

var id;

module.exports={
    login : function (browser) {
        browser 
        .login(Data.user1[2].username, Data.user1[2].password)

},
'Patient' : function(browser){
	browser  
	   .useCss()
	   .pause(500)
	   .click('a[class="firstLevel"][href="#"]')
	   .pause(300)
	   .click('a[href="/EHR/Doctor/view-patient-details-open"]')
	   .waitForElementVisible('#col0_filter' , 60000)
	   .pause(500)
	   .getText('td[class="sorting_1"]' , function(result){
	   	  id=result.value
	   	    browser
	   	       .useCss()
	   	       .click('a[onclick="postNavigateToProfile('+result.value+',1);"]')
	   })
	   .waitForElementVisible('button[onclick="openStartTreatment();"]' , 60000)
	   .pause(500)
},
'Thoracic exam':function(browser){	
   browser   
	    .useXpath()
	    .click("//*[@id='treatmentformsContent']/div[3]/span/button")
	    .useCss()
	    .waitForElementVisible('button[onclick="addSoapNotes();"]' , 60000)
	    .pause(1000)
	    .useXpath()
        .getLocationInView("//*[@id='treatmentformsContent']/div/a[text()='Wrist And Hand Initial Exam -']")
        .pause(500)
        .getLocationInView("//*[@id='treatmentformsContent']/div/a[text()='Shoulder Initial Exam -']")
        .pause(500)
        .click("//*[@id='treatmentformsContent']/div/a[text()='Thoracic Initial Exam -']")
        .useCss()
	    .waitForElementVisible('button[onclick="gobackExamsList()"]' , 60000)
        .pause(500)
       .thoracic(pal, Acromion, Inferior_Pole, Iliac_Crest, Rib_Humping, Rectus_Abdominis, Obliques, Levator_Scapulae, Serratus_Anterior, Pectoralis_Major, 
                      Trapezius, Rhomboids, Pectoralis_Minor, Paraspinals, functional_range, subluxation_range, orthopedic_range, t1_t2, t3_t4, t5_t6, t7_t8, t9_t10,
                       t11_t12, Adams_Sign, Schepelman, Valsalva, dejerines_Triad, Soto_Hall, Sternal_Compression, Beevors_Sign , nurological, intercostal, 
                       functional_deficit, functional_deficit_other)
        .useCss()
        .pause(500)
        .getLocationInView('#otherNoteid')
        .pause(500)
        .getLocationInView('input[name=patientName]')
        .pause(500)
        var a=['Muscle' , 'Symmetry' , 'Anatomical' , 'Asymmetries']
        muscleSymmetryid=a[Math.floor(Math.random()*a.length)]
        var b=['Swelling' , 'Discoloration' , 'Acromion' , 'Scapula']
        swellingDiscolorationid=b[Math.floor(Math.random()*b.length)]

        browser
          .clearValue('#muscleSymmetryid')
          .setValue('#muscleSymmetryid' , muscleSymmetryid)
          .clearValue('#swellingDiscolorationid')
          .setValue('#swellingDiscolorationid' , swellingDiscolorationid)

             for (var i = 0; i < 3; i++) {
              var c=['acromionLeft' , 'acromionRight']
              d=c[Math.floor(Math.random()*c.length)]
              browser
                .click('input[name="'+d+'"]')
              if (d=="acromionLeft") {
                Acromion.push(1)
              }else{
               Acromion.push(2)
             }
              }

              for (var i = 0; i < 3; i++) {
              var e=['inferiorPoleScapulaLeft' , 'inferiorPoleScapulaRight']
              f=e[Math.floor(Math.random()*e.length)]
              browser
                .click('input[name="'+f+'"]')
              if (f=="inferiorPoleScapulaLeft") {
                Inferior_Pole.push(1)
              }else{
               Inferior_Pole.push(2)
             }
              }


              for (var i = 0; i < 3; i++) {
              var g=['iliacCrestLeft' , 'iliacCrestRight']
              h=g[Math.floor(Math.random()*g.length)]
              browser
                .click('input[name="'+h+'"]')
              if (h=="iliacCrestLeft") {
                Iliac_Crest.push(1)
              }else{
               Iliac_Crest.push(2)
             }
              }

              for (var i = 0; i < 3; i++) {
              var j=['ribHumpingLeft' , 'ribHumpingRight']
              k=j[Math.floor(Math.random()*j.length)]
              browser
                .click('input[name="'+k+'"]')
              if (k=="ribHumpingLeft") {
                Rib_Humping.push(1)
              }else{
               Rib_Humping.push(2)
             }
              }


              for (var i = 0; i < 3; i++) {
              var l=['rectusAbdominisLeft' , 'rectusAbdominisRight']
              m=l[Math.floor(Math.random()*l.length)]
              browser
                .click('input[name="'+m+'"]')
              if (m=="rectusAbdominisLeft") {
                Rectus_Abdominis.push(1)
              }else{
               Rectus_Abdominis.push(2)
             }
              }


              for (var i = 0; i < 3; i++) {
              var o=['obliquesLeft' , 'obliquesRight']
              p=o[Math.floor(Math.random()*o.length)]
              browser
                .click('input[name="'+p+'"]')
              if (p=="obliquesLeft") {
                Obliques.push(1)
              }else{
               Obliques.push(2)
             }
              }


              for (var i = 0; i < 3; i++) {
              var q=['levatorScapulaeLeft' , 'levatorScapulaeRight']
              r=q[Math.floor(Math.random()*q.length)]
              browser
                .click('input[name="'+r+'"]')
              if (r=="levatorScapulaeLeft") {
                Levator_Scapulae.push(1)
              }else{
               Levator_Scapulae.push(2)
             }
              }

              for (var i = 0; i < 3; i++) {
              var s=['serratusAnteriorLeft' , 'serratusAnteriorRight']
              t=s[Math.floor(Math.random()*s.length)]
              browser
                .click('input[name="'+t+'"]')
              if (t=="serratusAnteriorLeft") {
                Serratus_Anterior.push(1)
              }else{
               Serratus_Anterior.push(2)
             }
              }

              for (var i = 0; i < 3; i++) {
              var u=['pectoralisMajorLeft' , 'pectoralisMajorRight']
              v=u[Math.floor(Math.random()*u.length)]
              browser
                .click('input[name="'+v+'"]')
              if (v=="pectoralisMajorLeft") {
                Pectoralis_Major.push(1)
              }else{
               Pectoralis_Major.push(2)
             }
              }


              for (var i = 0; i < 3; i++) {
              var w=['trapeziusLeft' , 'trapeziusRight']
              x=w[Math.floor(Math.random()*w.length)]
              browser
                .click('input[name="'+x+'"]')
              if (x=="trapeziusLeft") {
                Trapezius.push(1)
              }else{
               Trapezius.push(2)
             }
              }

              for (var i = 0; i < 3; i++) {
              var y=['rhomboidsLeft' , 'rhomboidsRight']
              z=y[Math.floor(Math.random()*y.length)]
              browser
                .click('input[name="'+z+'"]')
              if (z=="rhomboidsLeft") {
                Rhomboids.push(1)
              }else{
               Rhomboids.push(2)
             }
              }

              for (var i = 0; i < 3; i++) {
              var a1=['pectoralisMinorLeft' , 'pectoralisMinorRight']
              a2=a1[Math.floor(Math.random()*a1.length)]
              browser
                .click('input[name="'+a2+'"]')
              if (a2=="pectoralisMinorLeft") {
                Pectoralis_Minor.push(1)
              }else{
               Pectoralis_Minor.push(2)
             }
              }


              for (var i = 0; i < 3; i++) {
              var a3=['paraspinalsLeft' , 'paraspinalsRight']
              a4=a3[Math.floor(Math.random()*a3.length)]
              browser
                .click('input[name="'+a4+'"]')
              if (a4=="paraspinalsLeft") {
                Paraspinals.push(1)
              }else{
               Paraspinals.push(2)
             }
              }


           var ab=['other1' , 'other2' , 'other3']   
           other=ab[Math.floor(Math.random()*ab.length)]
           
           browser
             .clearValue('#otherNoteid')
             .setValue('#otherNoteid' , other)
             .pause(500)
             .getLocationInView('#t12S1id')
             .pause(500)
             .getLocationInView('#acromionleftid')
             .pause(500)
             for(i=0; i<3; i++){
              ac=Math.floor((Math.random()*2)+0)
              pal.push(ac)
              browser
                .click(tho.view1[ac])
             }

             browser
              .pause(500)
              .getLocationInView('#neurologicalExcept1')
              .pause(500)
              .getLocationInView('#functionalRangeMotionUnremarkable1')
              .pause(500)

          for(i=0; i<=5; i++){ 
            var ad=['20' , '30' , '40' , '50']  
            ae=ad[Math.floor(Math.random()*ad.length)]
            Flexion.push(ae)
            browser
             .clearValue(tho.Elicited[i])
             .setValue(tho.Elicited[i] , ae)

          }

          for(i=0; i<3; i++){
            af=Math.floor((Math.random()*2)+0)
            t1_t2.push(af+1)
            browser
            .click(tho.tt1[af])
          }

          for(i=0; i<3; i++){
            ag=Math.floor((Math.random()*2)+0)
            t3_t4.push(ag+1)
            browser
            .click(tho.tt2[ag])
          }

          for(i=0; i<3; i++){
            ah=Math.floor((Math.random()*2)+0)
            t5_t6.push(ah+1)
            browser
            .click(tho.tt3[ah])
          }

          for(i=0; i<3; i++){
            ai=Math.floor((Math.random()*2)+0)
            t7_t8.push(ai+1)
            browser
            .click(tho.tt4[ai])
          }

          for(i=0; i<3; i++){
            aj=Math.floor((Math.random()*2)+0)
            t9_t10.push(aj+1)
            browser
            .click(tho.tt5[aj])
          }

          for(i=0; i<3; i++){
            ak=Math.floor((Math.random()*2)+0)
            t11_t12.push(ak+1)
            browser
            .click(tho.tt6[ak])
          }

          for(i=0; i<3; i++){
            al=Math.floor((Math.random()*2)+0)
            Adams_Sign.push(al+1)
            browser
            .click(tho.oo1[al])
          }

          for(i=0; i<3; i++){
            am=Math.floor((Math.random()*2)+0)
            Schepelman.push(am+1)
            browser
            .click(tho.oo2[am])
          }

          for(i=0; i<3; i++){
            an=Math.floor((Math.random()*2)+0)
            Valsalva.push(an+1)
            browser
            .click(tho.oo3[an])
          }

          for(i=0; i<3; i++){
            ao=Math.floor((Math.random()*2)+0)
            dejerines_Triad.push(ao+1)
            browser
            .click(tho.oo4[ao])
          }

          for(i=0; i<3; i++){
            ap=Math.floor((Math.random()*2)+0)
            Soto_Hall.push(ap+1)
            browser
            .click(tho.oo5[ap])
          }

          for(i=0; i<3; i++){
            aq=Math.floor((Math.random()*2)+0)
            Sternal_Compression.push(aq+1)
            browser
            .click(tho.oo6[aq])
          }

          for(i=0; i<3; i++){
            ar=Math.floor((Math.random()*2)+0)
            Beevors_Sign.push(ar+1)
            browser
            .click(tho.oo7[ar])
          }


          for(i=0; i<3; i++){
            as=Math.floor((Math.random()*2)+0)
            nurological.push(as+1)
            browser
            .click(tho.oo8[as])
          }


           var at=['note1' , 'note2' , 'note3']   
           note=at[Math.floor(Math.random()*at.length)]
           browser
             .clearValue('#noteid')
             .setValue('#noteid' , note)
             .pause(500)
             .getLocationInView('#sittingid')
             .pause(500)
             .getLocationInView('#neurologicalUnremarkable1')
             .pause(500)
      
            for(i=0; i<6; i++){
             au=Math.floor((Math.random()*12)+0)
             intercostal.push(au+1)
              browser
              .click(tho.inter[au])
            }

            for(i=0; i<3; i++){
              av=Math.floor((Math.random()*4)+0)
              functional_deficit.push(av+1)
              browser
              .click(tho.fun[av])
              if(av=='3'){
                browser
                 .isVisible('#thoracicdeficitOtherTextid' , function(rusult){
                  var aw=['note1' , 'note2' , 'note3']   
                  oth1=aw[Math.floor(Math.random()*aw.length)]
                  functional_deficit_other.push(oth1)
                    browser
                      .clearValue('#thoracicdeficitOtherTextid')
                      .setValue('#thoracicdeficitOtherTextid' , oth1)
                 })
              }
             
             }
            browser
             .pause(300)
             .useXpath()
             .click("//*[@id='formid']/div[34]/button[1]")
             .useXpath()
             .waitForElementVisible("//*[@id='treatmentformsContent']/div/a[text()='Initial Exam Screen 1 -']" , 60000)
             .pause(500)
        .getLocationInView("//*[@id='treatmentformsContent']/div/a[text()='Wrist And Hand Initial Exam -']")
        .pause(500)
        .getLocationInView("//*[@id='treatmentformsContent']/div/a[text()='Shoulder Initial Exam -']")
        .pause(500)
        .click("//*[@id='treatmentformsContent']/div/a[text()='Thoracic Initial Exam -']")
        .useCss()
	    .waitForElementVisible('button[onclick="gobackExamsList()"]' , 60000)
        .pause(500)
        
  },
'Check':function(browser){
  browser

  pal.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < pal.length; i++) {
    if (pal[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      abc1.push(current)
    }
        }
        current = pal[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      abc1.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Acromion.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Acromion.length; i++) {
    if (Acromion[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      abc2.push(current)
    }
        }
        current = Acromion[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      abc2.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Inferior_Pole.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Inferior_Pole.length; i++) {
    if (Inferior_Pole[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      abc3.push(current)
    }
        }
        current = Inferior_Pole[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      abc3.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Iliac_Crest.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Iliac_Crest.length; i++) {
    if (Iliac_Crest[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      abc4.push(current)
    }
        }
        current = Iliac_Crest[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      abc4.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Rib_Humping.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Rib_Humping.length; i++) {
    if (Rib_Humping[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      abc5.push(current)
    }
        }
        current = Rib_Humping[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      abc5.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Rectus_Abdominis.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Rectus_Abdominis.length; i++) {
    if (Rectus_Abdominis[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      abc6.push(current)
    }
        }
        current = Rectus_Abdominis[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      abc6.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Obliques.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Obliques.length; i++) {
    if (Obliques[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      abc7.push(current)
    }
        }
        current = Obliques[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      abc7.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Levator_Scapulae.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Levator_Scapulae.length; i++) {
    if (Levator_Scapulae[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      abc8.push(current)
    }
        }
        current = Levator_Scapulae[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      abc8.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Serratus_Anterior.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Serratus_Anterior.length; i++) {
    if (Serratus_Anterior[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      abc9.push(current)
    }
        }
        current = Serratus_Anterior[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      abc9.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Pectoralis_Major.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Pectoralis_Major.length; i++) {
    if (Pectoralis_Major[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      abc10.push(current)
    }
        }
        current = Pectoralis_Major[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      abc10.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Trapezius.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Trapezius.length; i++) {
    if (Trapezius[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      abc11.push(current)
    }
        }
        current = Trapezius[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      abc11.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Rhomboids.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Rhomboids.length; i++) {
    if (Rhomboids[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      abc12.push(current)
    }
        }
        current = Rhomboids[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      abc12.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Pectoralis_Minor.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Pectoralis_Minor.length; i++) {
    if (Pectoralis_Minor[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      abc13.push(current)
    }
        }
        current = Pectoralis_Minor[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      abc13.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Paraspinals.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Paraspinals.length; i++) {
    if (Paraspinals[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      abc14.push(current)
    }
        }
        current = Paraspinals[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      abc14.push(current)
    }
}

//-------------------------------------------------------------------------------------------
functional_range.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < functional_range.length; i++) {
    if (functional_range[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      abc15.push(current)
    }
        }
        current = functional_range[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      abc15.push(current)
    }
}

//-------------------------------------------------------------------------------------------
subluxation_range.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < subluxation_range.length; i++) {
    if (subluxation_range[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      abc16.push(current)
    }
        }
        current = subluxation_range[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      abc16.push(current)
    }
}

//-------------------------------------------------------------------------------------------
orthopedic_range.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < orthopedic_range.length; i++) {
    if (orthopedic_range[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      abc17.push(current)
    }
        }
        current = orthopedic_range[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      abc17.push(current)
    }
}

//-------------------------------------------------------------------------------------------
t1_t2.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < t1_t2.length; i++) {
    if (t1_t2[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      abc18.push(current)
    }
        }
        current = t1_t2[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      abc18.push(current)
    }
}

//-------------------------------------------------------------------------------------------
t3_t4.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < t3_t4.length; i++) {
    if (t3_t4[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      abc19.push(current)
    }
        }
        current = t3_t4[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      abc19.push(current)
    }
}

//-------------------------------------------------------------------------------------------
t5_t6.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < t5_t6.length; i++) {
    if (t5_t6[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      abc20.push(current)
    }
        }
        current = t5_t6[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      abc20.push(current)
    }
}

//-------------------------------------------------------------------------------------------
t7_t8.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < t7_t8.length; i++) {
    if (t7_t8[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      abc21.push(current)
    }
        }
        current = t7_t8[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      abc21.push(current)
    }
}

//-------------------------------------------------------------------------------------------
t9_t10.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < t9_t10.length; i++) {
    if (t9_t10[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      abc22.push(current)
    }
        }
        current = t9_t10[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      abc22.push(current)
    }
}

//-------------------------------------------------------------------------------------------
t11_t12.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < t11_t12.length; i++) {
    if (t11_t12[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      abc23.push(current)
    }
        }
        current = t11_t12[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      abc23.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Adams_Sign.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Adams_Sign.length; i++) {
    if (Adams_Sign[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      abc24.push(current)
    }
        }
        current = Adams_Sign[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      abc24.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Schepelman.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Schepelman.length; i++) {
    if (Schepelman[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      abc25.push(current)
    }
        }
        current = Schepelman[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      abc25.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Valsalva.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Valsalva.length; i++) {
    if (Valsalva[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      abc26.push(current)
    }
        }
        current = Valsalva[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      abc26.push(current)
    }
}

//-------------------------------------------------------------------------------------------
dejerines_Triad.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < dejerines_Triad.length; i++) {
    if (dejerines_Triad[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      abc27.push(current)
    }
        }
        current = dejerines_Triad[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      abc27.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Soto_Hall.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Soto_Hall.length; i++) {
    if (Soto_Hall[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      abc28.push(current)
    }
        }
        current = Soto_Hall[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      abc28.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Sternal_Compression.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Sternal_Compression.length; i++) {
    if (Sternal_Compression[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      abc29.push(current)
    }
        }
        current = Sternal_Compression[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      abc29.push(current)
    }
}

//-------------------------------------------------------------------------------------------
Beevors_Sign.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < Beevors_Sign.length; i++) {
    if (Beevors_Sign[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      abc30.push(current)
    }
        }
        current = Beevors_Sign[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      abc30.push(current)
    }
}

//-------------------------------------------------------------------------------------------
nurological.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < nurological.length; i++) {
    if (nurological[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      abc31.push(current)
    }
        }
        current = nurological[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      abc31.push(current)
    }
}

//-------------------------------------------------------------------------------------------
intercostal.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < intercostal.length; i++) {
    if (intercostal[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      abc32.push(current)
    }
        }
        current = intercostal[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      abc32.push(current)
    }
}

//-------------------------------------------------------------------------------------------
functional_deficit.sort();

var current = null;
var cnt = 0;
for (var i = 0; i < functional_deficit.length; i++) {
    if (functional_deficit[i] != current) {
        if (cnt > 0) {
           // console.log(current + ' comes --> ' + cnt + ' times<br>');
            if(cnt % 2 == 1){
      abc33.push(current)
    }
        }
        current = functional_deficit[i];
        cnt = 1;
    } else {
        cnt++;
    }
}
if (cnt > 0) {
   // console.log(current + ' comes --> ' + cnt + ' times');
    if(cnt % 2 == 1){
      abc33.push(current)
    }
}

//-------------------------------------------------------------------------------------------
if ((abc33.map(Number)).indexOf(4) > -1) {
  abc34.push(functional_deficit_other.pop())
}
//-------------------------------------------------------------------------------------------
browser
 .pause(500)
 .thoracicexam(muscleSymmetryid_1, swellingDiscolorationid_1, Acromion_1, Inferior_Pole_1, Iliac_Crest_1, Rib_Humping_1, Rectus_Abdominis_1, Obliques_1, 
                         Levator_Scapulae_1, Serratus_Anterior_1, Pectoralis_Major_1, Trapezius_1, Rhomboids_1, Pectoralis_Minor_1, Paraspinals_1, 
                         pal_1, other_1, functional_range_1 , subluxation_range_1, orthopedic_range_1, Flexion_1, t1_t2_1, t3_t4_1, t5_t6_1, t7_t8_1, t9_t10_1, 
                         t11_t12_1, Adams_Sign_1, Schepelman_1, Valsalva_1, dejerines_Triad_1, Soto_Hall_1, Sternal_Compression_1, Beevors_Sign_1, nurological_1, 
                         intercostal_1, functional_deficit_1, functional_deficit_other_1, note_1, abc1,abc2,abc3,abc4,abc5,abc6,abc7,abc8,abc9,abc10,abc11,abc12,
                         abc13,abc14,abc15,abc16,abc17,abc18,abc19,abc20,abc21,abc22,abc23,abc24,abc25,abc26,abc27,abc28,abc29,abc30,abc31,abc32,abc33,abc34,
                         muscleSymmetryid,swellingDiscolorationid,other,note,Flexion)
 .pause(500)
 .end()

},  
'Result':''+function(browser){
  browser
       console.log("PALPATION------------------>"+[JSON.stringify(pal_1.map(Number))==JSON.stringify(abc1.map(Number))])
       console.log("Acromion------------------->"+[JSON.stringify(Acromion_1.map(Number))==JSON.stringify(abc2.map(Number))])       
       console.log("Inferior_Pole-------------->"+[JSON.stringify(Inferior_Pole_1.map(Number))==JSON.stringify(abc3.map(Number))])     
       console.log("Iliac_Crest---------------->"+[JSON.stringify(Iliac_Crest_1.map(Number))==JSON.stringify(abc4.map(Number))])       
       console.log("Rib_Humping---------------->"+[JSON.stringify(Rib_Humping_1.map(Number))==JSON.stringify(abc5.map(Number))]) 
       console.log("Rectus_Abdominis----------->"+[JSON.stringify(Rectus_Abdominis_1.map(Number))==JSON.stringify(abc6.map(Number))])
       console.log("Oblique-------------------->"+[JSON.stringify(Obliques_1.map(Number))==JSON.stringify(abc7.map(Number))])
       console.log("Levator_Scapulae----------->"+[JSON.stringify(Levator_Scapulae_1.map(Number))==JSON.stringify(abc8.map(Number))])  
       console.log("Serratus_Anterior---------->"+[JSON.stringify(Serratus_Anterior_1.map(Number))==JSON.stringify(abc9.map(Number))])
       console.log("Pectoralis_Major----------->"+[JSON.stringify(Pectoralis_Major_1.map(Number))==JSON.stringify(abc10.map(Number))])
       console.log("Trapezius------------------>"+[JSON.stringify(Trapezius_1.map(Number))==JSON.stringify(abc11.map(Number))])
       console.log("Rhomboids------------------>"+[JSON.stringify(Rhomboids_1.map(Number))==JSON.stringify(abc12.map(Number))])
       console.log("Pectoralis_Minor----------->"+[JSON.stringify(Pectoralis_Minor_1.map(Number))==JSON.stringify(abc13.map(Number))])
       console.log("Paraspinals---------------->"+[JSON.stringify(Paraspinals_1.map(Number))==JSON.stringify(abc14.map(Number))])
       console.log("functional_range----------->"+[JSON.stringify(functional_range_1.map(Number))==JSON.stringify(abc15.map(Number))])  
       console.log("subluxation_range---------->"+[JSON.stringify(subluxation_range_1.map(Number))==JSON.stringify(abc16.map(Number))])
       console.log("orthopedic_range----------->"+[JSON.stringify(orthopedic_range_1.map(Number))==JSON.stringify(abc17.map(Number))])
       console.log("t1_t2---------------------->"+[JSON.stringify(t1_t2_1.map(Number))==JSON.stringify(abc18.map(Number))])
       console.log("t3_t4---------------------->"+[JSON.stringify(t3_t4_1.map(Number))==JSON.stringify(abc19.map(Number))])
       console.log("t5_t6---------------------->"+[JSON.stringify(t5_t6_1.map(Number))==JSON.stringify(abc20.map(Number))])
       console.log("t7_t8---------------------->"+[JSON.stringify(t7_t8_1.map(Number))==JSON.stringify(abc21.map(Number))])
       console.log("t9_t10--------------------->"+[JSON.stringify(t9_t10_1.map(Number))==JSON.stringify(abc22.map(Number))])
       console.log("t11_t12-------------------->"+[JSON.stringify(t11_t12_1.map(Number))==JSON.stringify(abc23.map(Number))])
       console.log("Adams_Sign----------------->"+[JSON.stringify(Adams_Sign_1.map(Number))==JSON.stringify(abc24.map(Number))])
       console.log("Schepelman----------------->"+[JSON.stringify(Schepelman_1.map(Number))==JSON.stringify(abc25.map(Number))])
       console.log("Valsalva------------------->"+[JSON.stringify(Valsalva_1.map(Number))==JSON.stringify(abc26.map(Number))])
       console.log("dejerines_Triad------------>"+[JSON.stringify(dejerines_Triad_1.map(Number))==JSON.stringify(abc27.map(Number))])
       console.log("Soto_Hall------------------>"+[JSON.stringify(Soto_Hall_1.map(Number))==JSON.stringify(abc28.map(Number))])
       console.log("Sternal_Compression-------->"+[JSON.stringify(Sternal_Compression_1.map(Number))==JSON.stringify(abc29.map(Number))])        
       console.log("Beevors_Sign--------------->"+[JSON.stringify(Beevors_Sign_1.map(Number))==JSON.stringify(abc30.map(Number))])    
       console.log("nurological---------------->"+[JSON.stringify(nurological_1.map(Number))==JSON.stringify(abc31.map(Number))])
       console.log("intercostal---------------->"+[JSON.stringify(intercostal_1.map(Number))==JSON.stringify(abc32.sort(function(a,b){return a-b}))])
       console.log("functional_deficit--------->"+[JSON.stringify(functional_deficit_1.map(Number))==JSON.stringify(abc33.map(Number))])
       console.log("functional_deficit_other--->"+[JSON.stringify(functional_deficit_other_1.join())==JSON.stringify(abc34.join())])
       console.log("muscleSymmetryid----------->"+[muscleSymmetryid==muscleSymmetryid_1])
       console.log("swellingDiscolorationid---->"+[swellingDiscolorationid==swellingDiscolorationid_1])
       console.log("other---------------------->"+[other==other_1])
       console.log("Flexion-------------------->"+[JSON.stringify(Flexion.map(Number))==JSON.stringify(Flexion_1.map(Number))])
       console.log("note----------------------->"+[note==note_1])
}
}       
      